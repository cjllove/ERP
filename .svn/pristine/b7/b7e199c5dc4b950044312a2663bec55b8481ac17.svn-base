using FineUIPro;
using Newtonsoft.Json.Linq;
using Oracle.ManagedDataAccess.Client;
using XTBase;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace SPDProject.SpdXM.XJ_CJRM
{
    public partial class High_valueConsumable : BillBase
    {
        private string strDocSql = "SELECT * FROM DAT_XS_DOC WHERE SEQNO ='{0}'";
        private string strComSql = "SELECT A.*,B.*,F_GETPRODUCERNAME(A.PRODUCER) PRODUCERNAME,f_getunitname(A.UNIT) UNITNAME,f_getunitname(B.UNIT) UNITSMALLNAME  FROM DAT_XS_COM A,DOC_GOODS B WHERE SEQNO ='{0}' AND A.GDSEQ = B.GDSEQ ORDER BY ROWNO";
        protected string GZCKD = "/grf/gzckd.grf";

        public override Field[] LockControl
        {
            get { return new Field[] { trbONECODE, docBILLNO, docDEPTID, docXSRQ, docCUSTID, docOPTID, docOPTTABLE, docSTR6, docDOCTOR, docSTR2 }; }
        }

        public High_valueConsumable()
        {
            BillType = "XSG";
        }

        protected void Page_Init(object sender, EventArgs e)
        {
            if (Request.QueryString["oper"] != null && Request.QueryString["oper"].ToString() == "audit")
            {
                GridColumn PRINTNUM = GridList.FindColumn("PRINTNUM");
                PRINTNUM.Hidden = false;
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                //屏蔽不需要的操作按钮
                if (Request.QueryString["oper"] != null)
                {
                    if (Request.QueryString["oper"].ToString() == "input")
                    {
                        ButtonHidden(btnExport, btnCopy, btnNext, btnBef, btnAddRow, btnCancel, btnTJ);
                    }
                    else if (Request.QueryString["oper"].ToString() == "audit")
                    {
                        billLockDoc(true);
                        TabStrip1.ActiveTabIndex = 0;
                        ButtonHidden(btnExport, btnCopy, btnNext, btnBef, btnAddRow, btnSave, btnDelRow, btnNew, btnDel, btnExtract);
                    }
                }
                if (Request.QueryString["fg"] != null && Request.QueryString["fg"].ToString() == "a")
                {
                    //打印高值销售单
                    btnPrint.Text = "打 印";
                    btnPrint.OnClientClick = "btnPrint_Bill()";
                }
                DataInit();
                billNew();
            }
        }
        protected bool state()
        {
            if (Request.QueryString["oper"].ToString() == "input")
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        private void DataInit()
        {
            lstLRRQ1.SelectedDate = DateTime.Now.AddDays(-1);
            lstLRRQ2.SelectedDate = DateTime.Now;

            PubFunc.DdlDataGet("DDL_USER", docSHR, docLRY, lstLRY);
            if (docSHR.Items.Count > 0)
            {
                if (docSHR.Items[0].Text == "--请选择--")
                {
                    docSHR.Items[0].Text = "";
                }
            }
            //PubFunc.DdlDataGet("DDL_SYS_DEPTRANGE", UserAction.UserID, docDEPTID, lstDEPTID);
            DepartmentBind.BindDDL("DDL_SYS_DEPTRANGE", UserAction.UserID, docDEPTID, lstDEPTID);
            PubFunc.DdlDataGet("DDL_BILL_STATUS", docFLAG, lstFlag);
            hfdCurrent.Text = UserAction.UserID;

            //获取客户化GRF文件地址  By YuanPeng 2016年8月26日20:33:57 At 新疆昌吉
            string grf = Doc.DbGetGrf("GZCKD");
            if (!string.IsNullOrWhiteSpace(grf))
            {
                GZCKD = grf;
            }
        }

        protected override void billNew()
        {
            //原单据保存判断
            string strDept = docDEPTID.SelectedValue;
            PubFunc.FormDataClear(FormDoc);

            docFLAG.SelectedValue = "M";
            docLRY.SelectedValue = UserAction.UserID;
            //docSHR.SelectedValue = UserAction.UserID;
            docLRRQ.SelectedDate = DateTime.Now;
            docXSRQ.SelectedDate = DateTime.Now;
            //docSHRQ.SelectedDate = DateTime.Now;
            docDEPTID.SelectedValue = strDept;
            if (docDEPTID.SelectedValue.Length < 1)
            {
                docDEPTID.SelectedIndex = 1;
            }

            billLockDoc(false);
            docMEMO.Enabled = true;
            btnSave.Enabled = true;
            btnAudit.Enabled = false;
            //btnPrint.Enabled = false;
            btnDelRow.Enabled = true;
            btnTJ.Enabled = false;
            btnDel.Enabled = false;
            //清空Grid行
            PageContext.RegisterStartupScript(GridGoods.GetRejectChangesReference());
        }

        private JObject GetJObject(Dictionary<string, object> dicRecord)
        {
            JObject defaultObj = new JObject();
            foreach (string key in dicRecord.Keys)
            {
                defaultObj.Add(key, dicRecord[key].ToString());
            }

            decimal hl = 0, rs = 0, jg = 0;
            decimal.TryParse(dicRecord["BZHL"].ToString(), out hl);//包装含量
            decimal.TryParse(dicRecord["BZSL"].ToString(), out rs);//订货数
            decimal.TryParse(dicRecord["HSJJ"].ToString(), out jg);//价格

            defaultObj.Remove("DHSL");
            defaultObj.Remove("HSJE");
            defaultObj.Add("DHSL", rs * hl);
            //defaultObj.Add("HSJE", rs * jg);

            //处理金额格式
            string jingdu = Math.Round(rs * jg, 2).ToString("F2");
            defaultObj.Add("HSJE", jingdu);

            return defaultObj;
        }
        protected void GridGoods_AfterEdit(object sender, FineUIPro.GridAfterEditEventArgs e)
        {
            //不需处理
            string[] strCell = GridGoods.SelectedCell;
            List<Dictionary<string, object>> newDict = GridGoods.GetNewAddedList();
            if (newDict.Count == 0) return;
            if (e.ColumnID == "BZSL" || e.ColumnID == "HSJJ")
            {
                if (Doc.GetGridInf(GridGoods, e.RowID, "BZHL").Length < 1 || Doc.GetGridInf(GridGoods, e.RowID, "BZSL").Length < 1 || Doc.GetGridInf(GridGoods, e.RowID, "HSJJ").Length < 1)
                {
                    Alert.Show("商品信息异常，请详细检查商品信息：包装含量、价格或数量！", "异常信息", MessageBoxIcon.Warning);
                    return;
                }
                JObject defaultObj = Doc.GetJObject(GridGoods, e.RowID);
                decimal hl = 0, rs = 0, jg = 0;
                decimal.TryParse((defaultObj["BZHL"] ?? "0").ToString(), out hl);
                decimal.TryParse((defaultObj["BZSL"] ?? "0").ToString(), out rs);
                decimal.TryParse((defaultObj["HSJJ"] ?? "0").ToString(), out jg);
                defaultObj["DHSL"] = rs * hl;
                defaultObj["HSJE"] = Math.Round(rs * jg, 2).ToString("F2");
                PageContext.RegisterStartupScript(GridGoods.GetUpdateCellValueReference(e.RowID, defaultObj));
                //计算合计数量
                decimal bzslTotal = 0, feeTotal = 0;
                foreach (Dictionary<string, object> dic in newDict)
                {
                    bzslTotal += Convert.ToDecimal(dic["BZSL"]);
                    feeTotal += Convert.ToDecimal(dic["HSJJ"]) * Convert.ToDecimal(dic["BZSL"]);
                }
                JObject summary = new JObject();
                summary.Add("GDNAME", "本页合计");
                summary.Add("BZSL", bzslTotal.ToString());
                summary.Add("HSJE", feeTotal.ToString("F2"));
                GridGoods.SummaryData = summary;
            }
            else if (e.ColumnID == "PH")
            {
                if (newDict[e.RowIndex]["GDSEQ"] == null)
                {
                    Alert.Show("请先选择商品信息！", "异常信息", MessageBoxIcon.Warning);
                    return;
                }
                if (newDict[e.RowIndex]["PH"] == null)
                {
                    Alert.Show("请填写批次信息！", "异常信息", MessageBoxIcon.Warning);
                    return;
                }
                if (PubFunc.StrIsEmpty(newDict[e.RowIndex]["GDSEQ"].ToString()))
                {
                    Alert.Show("请先选择商品信息！", "异常信息", MessageBoxIcon.Warning);
                    return;
                }
                if (PubFunc.StrIsEmpty(newDict[e.RowIndex]["PH"].ToString()))
                {
                    Alert.Show("请填写批次信息！", "异常信息", MessageBoxIcon.Warning);
                    return;
                }
                if (newDict[e.RowIndex]["PH"].ToString() == "\\")
                {
                    DataTable dtPH = Doc.GetGoodsPH_New(newDict[e.RowIndex]["GDSEQ"].ToString(), docDEPTID.SelectedValue);
                    if (dtPH != null && dtPH.Rows.Count > 0)
                    {
                        hdfIndex.Text = GridGoods.SelectedCell[1].ToString();
                        hfdRowIndex.Text = GridGoods.SelectedCell[0].ToString();
                        savecustid.Text = newDict[e.RowIndex]["CUSTID"].ToString();
                        saveOnecode.Text = newDict[e.RowIndex]["ONECODE"].ToString();
                        GridLot.DataSource = dtPH;
                        GridLot.DataBind();
                        WindowLot.Hidden = false;
                    }
                    else
                    {
                        newDict[e.RowIndex]["PH"] = "";
                        PageContext.RegisterStartupScript(GridGoods.GetUpdateCellValueReference(strCell[0], strCell[1], GetJObject(newDict[e.RowIndex]).ToString()));
                        Alert.Show("填写的批次信息不存在,请重新填写!", "异常信息", MessageBoxIcon.Warning);
                        return;
                    }
                }
            }
        }

        protected override void billClear()
        {
            PubFunc.FormDataClear(Formlist);
            lstLRRQ1.SelectedDate = DateTime.Now;
            lstLRRQ2.SelectedDate = DateTime.Now;
        }

        protected override void billAddRow()
        {
            if (docFLAG.SelectedValue != "N")
            {
                Alert.Show("非『新增』单据不能增行！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (PubFunc.FormDataCheck(FormDoc).Length > 1) return;
            billLockDoc(true);
            PubFunc.GridRowAdd(GridGoods, "INIT");
        }

        protected override void billDel()
        {
            if (docBILLNO.Text.Trim() == "")
            {
                Alert.Show("请选择需要删除的单据");
                return;
            }
            if (docFLAG.SelectedValue != "M" && docFLAG.SelectedValue != "R")
            {
                Alert.Show("非【新单】不能删除!");
                return;
            }
            List<CommandInfo> cmdList = new List<CommandInfo>();
            cmdList.Add(new CommandInfo("DELETE FROM DAT_XS_DOC T WHERE T.SEQNO ='" + docBILLNO.Text.Trim() + "'", null));
            cmdList.Add(new CommandInfo("DELETE FROM DAT_XS_COM T WHERE T.SEQNO ='" + docBILLNO.Text.Trim() + "'", null));
            if (DbHelperOra.ExecuteSqlTran(cmdList))
            {
                Alert.Show("单据删除成功!");
                OperLog("高值使用", "删除单据【" + docBILLNO.Text + "】");
                billSearch();
                billNew();
            }
            else
            {
                Alert.Show("单据删除失败!", "错误提示", MessageBoxIcon.Information);
            }
        }
        protected override void billDelRow()
        {
            if (docFLAG.SelectedValue != "M")
            {
                Alert.Show("非『新增』单据不能删行！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (GridGoods.SelectedRowID == null)
            {
                Alert.Show("请选择数据行删除！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            GridGoods.DeleteSelectedRows();
        }

        protected override void billGoods()
        {
            if (PubFunc.FormDataCheck(FormDoc).Length > 1) return;
            billLockDoc(true);
            //参数说明：cx-查询内容，bm-商品配置部门,su-供应商
            string url = "~/SpdQuery/GoodsWindow_Gather.aspx?bm=" + docDEPTID.SelectedValue + "&cx=&su=";
            PageContext.RegisterStartupScript(Window1.GetSaveStateReference(hfdValue.ClientID) + Window1.GetShowReference(url, "商品信息查询"));
        }

        protected override void billSearch()
        {
            if (lstLRRQ1.SelectedDate == null || lstLRRQ2.SelectedDate == null)
            {
                Alert.Show("请输入条件【使用日期】！");
                return;
            }
            else if (lstLRRQ1.SelectedDate > lstLRRQ2.SelectedDate)
            {
                Alert.Show("开始日期大于结束日期，请重新输入！");
                return;
            }

            string strSql = @"SELECT A.SEQNO,A.BILLNO,A.FLAG,B.NAME FLAGNAME,F_GETDEPTNAME(A.DEPTID) DEPTID,A.XSRQ,F_GETDEPTNAME(A.DEPTOUT) DEPTOUT,
                                     A.SUBNUM,F_GETUSERNAME(A.LRY) LRY,A.LRRQ,A.SHR,A.SHRQ,A.MEMO,A.STR6,A.CUSTID,A.OPTDATE,
                                     NVL((SELECT FUNCTIME FROM SYS_FUNCPRNNUM WHERE FUNCNO = A.SEQNO),0) PRINTNUM
                                from DAT_XS_DOC A, SYS_CODEVALUE B 
                                WHERE A.FLAG = B.CODE AND B.TYPE  ='DIC_BILLSTATUS' AND BILLTYPE='XSG' AND XSTYPE='1' ";
            string strSearch = "";

            if (state())
            {
                strSearch += "AND A.FLAG <> 'M'";
            }
            if (lstBILLNO.Text.Length > 0)
            {
                strSearch += string.Format(" AND  TRIM(UPPER(A.BILLNO))  LIKE '%{0}%'", lstBILLNO.Text.Trim().ToUpper());
            }
            if (lstDEPTID.SelectedItem != null && lstDEPTID.SelectedItem.Value.Length > 0)
            {
                strSearch += string.Format(" AND A.DEPTID='{0}'", lstDEPTID.SelectedItem.Value);
            }
            strSearch += string.Format(" AND deptid in( select code FROM SYS_DEPT where type <>'1' and  F_CHK_DATARANGE(CODE, '{0}') = 'Y' )", UserAction.UserID);
            strSearch += string.Format(" AND A.XSRQ>=TO_DATE('{0}','YYYY-MM-DD')", lstLRRQ1.Text);
            strSearch += string.Format(" AND A.XSRQ <TO_DATE('{0}','YYYY-MM-DD') + 1", lstLRRQ2.Text);
            if (lstCUSTID.Text.Trim().Length > 0)
            {
                strSearch += string.Format(" AND  A.CUSTID  LIKE '%{0}%'", lstCUSTID.Text.Trim());
            }
            if (lstSTR6.Text.Trim().Length > 0)
            {
                strSearch += string.Format(" AND  A.STR6  LIKE '%{0}%'", lstSTR6.Text.Trim());
            }
            if (!string.IsNullOrWhiteSpace(lstFlag.SelectedValue))
            {
                strSearch += string.Format(" AND A.FLAG='{0}'", lstFlag.SelectedValue);
            }
            if (!string.IsNullOrWhiteSpace(lstLRY.SelectedValue))
            {
                strSearch += string.Format(" AND A.LRY='{0}'", lstLRY.SelectedValue);
            }

            if (!string.IsNullOrWhiteSpace(strSearch))
            {
                strSql += strSearch;
            }
            strSql += " ORDER BY A.BILLNO DESC";

            highlightRows.Text = "";
            highlightRowYellow.Text = "";
            highRedlightRows.Text = "";
            highlightRowsNavajo.Text = "";

            GridList.DataSource = DbHelperOra.Query(strSql).Tables[0];
            GridList.DataBind();
        }

        //protected override void billAudit()
        //{
        //    if (docFLAG.SelectedValue != "M")
        //    {
        //        Alert.Show("非新单不能审核！");
        //        return;
        //    }

        //    //验证是否盘点
        //    if (DbHelperOra.Exists("SELECT 1 FROM DAT_PD_STOCK WHERE DEPTID = '" + docDEPTID.SelectedValue + "'"))
        //    {
        //        Alert.Show(string.Format("使用科室【{0}】正在盘点,请检查！", docDEPTID.SelectedText), "警告提示", MessageBoxIcon.Warning);
        //        return;
        //    }

        //    StringBuilder sbSql = new StringBuilder();
        //    sbSql.AppendFormat(@"DECLARE
        //            BEGIN
        //                    UPDATE DAT_XS_DOC SET FLAG = 'N' WHERE SEQNO = '{0}' AND FLAG = 'M';
        //                    IF SQL%ROWCOUNT = 0 THEN
        //                        RAISE_APPLICATION_ERROR(-20001, '修改单据[{0}]标志不成功！');
        //                    END IF;
        //                    STORE.P_BILLOPER('{0}', '{1}', '{2}', 'AUDIT');
        //            END; ", docSEQNO.Text, BillType, UserAction.UserID);
        //    if (DbHelperOra.ExecuteSql(sbSql.ToString()) > 0)
        //    {
        //        billLockDoc(true);
        //        Alert.Show("单据【" + docSEQNO.Text + "】审核成功！");
        //        OperLog("高值使用", "审核单据【" + docSEQNO.Text + "】");
        //        billOpen(docSEQNO.Text);
        //    }
        //}

        protected override void billAudit()
        {
            if (Doc.DbGetSysPara("LOCKSTOCK") == "Y")
            {
                Alert.Show("系统库存已被锁定，请等待物资管理科结存处理完毕再做审核处理！", "消息提醒", MessageBoxIcon.Warning);
                return;
            }

            if (docFLAG.SelectedValue != "M")
            {
                Alert.Show("非新单不能审核！");
                return;
            }

            //验证是否盘点
            if (DbHelperOra.Exists("SELECT 1 FROM DAT_PD_STOCK WHERE DEPTID = '" + docDEPTID.SelectedValue + "'"))
            {
                Alert.Show(string.Format("使用科室【{0}】正在盘点,请检查！", docDEPTID.SelectedText), "警告提示", MessageBoxIcon.Warning);
                return;
            }

            if (BillOper(docBILLNO.Text, "PASS2") == 1)
            {
                billLockDoc(true);
                Alert.Show("单据【" + docBILLNO.Text + "】审核成功！");
                OperLog("高值使用", "提交单据【" + docBILLNO.Text + "】并自动审核");
                billOpen(docBILLNO.Text);
            }
        }

        protected override void listRow_DoubleClick(object sender, FineUIPro.GridRowClickEventArgs e)
        {
            billOpen(GridList.Rows[e.RowIndex].Values[1].ToString());
        }

        protected override void billOpen(string strBillno)
        {
            DataTable dtDoc = DbHelperOra.Query(string.Format(strDocSql, strBillno)).Tables[0];
            PubFunc.FormDataSet(FormDoc, dtDoc.Rows[0]);

            PageContext.RegisterStartupScript(GridGoods.GetRejectChangesReference());
            decimal bzslTotal = 0, feeTotal = 0;
            DataTable dtBill = DbHelperOra.Query(string.Format(strComSql, strBillno)).Tables[0];
            if (dtBill != null && dtBill.Rows.Count > 0)
            {
                foreach (DataRow row in dtBill.Rows)
                {
                    LoadGridRow(row, false, "OLD");
                    bzslTotal += Convert.ToDecimal(row["BZSL"]);
                    feeTotal += Convert.ToDecimal(row["HSJJ"]) * Convert.ToDecimal(row["BZSL"]);
                }
            }
            //计算合计数量
            JObject summary = new JObject();
            summary.Add("GDNAME", "本页合计");
            summary.Add("BZSL", bzslTotal.ToString());
            summary.Add("HSJE", feeTotal.ToString("F2"));


            GridGoods.SummaryData = summary;
            PubFunc.FormLock(FormDoc, true, "");
            if (string.IsNullOrWhiteSpace(docOPTID.Text) || string.IsNullOrWhiteSpace(docDOCTOR.Text) || string.IsNullOrWhiteSpace(docOPTTABLE.Text) || string.IsNullOrWhiteSpace(docCUSTID.Text) || string.IsNullOrWhiteSpace(docSTR2.Text))
            {
                docOPTID.Enabled = true;
                docDOCTOR.Enabled = true;
                docOPTTABLE.Enabled = true;
                docCUSTID.Enabled = true;
                docSTR2.Enabled = true;
            }
            TabStrip1.ActiveTabIndex = 1;
            if (docFLAG.SelectedValue == "M" || docFLAG.SelectedValue == "R")
            {
                btnSave.Enabled = true;
                btnAudit.Enabled = true;
                //btnPrint.Enabled = false;
                btnDelRow.Enabled = true;
                btnTJ.Enabled = true;
                btnDel.Enabled = true;
                trbONECODE.Enabled = true;
            }
            else if (docFLAG.SelectedValue == "N")
            {
                btnSave.Enabled = false;
                btnAudit.Enabled = true;
                //btnPrint.Enabled = false;
                btnDelRow.Enabled = false;
                btnTJ.Enabled = false;
                btnCancel.Enabled = true;
                btnDel.Enabled = false;
                trbONECODE.Enabled = false;
            }
            else
            {
                btnSave.Enabled = false;
                btnAudit.Enabled = false;
                btnPrint.Enabled = true;
                btnDelRow.Enabled = false;
                btnTJ.Enabled = false;
                btnCancel.Enabled = false;
                btnDel.Enabled = false;
                trbONECODE.Enabled = false;
            }
        }
        protected override void billCancel()
        {
            if (PubFunc.StrIsEmpty(docSEQNO.Text))
            {
                Alert.Show("请选择需要操作的单据！", "操作提示", MessageBoxIcon.Warning);
                return;
            }
            if (docFLAG.SelectedValue == "N")
            {
                if (DbHelperOra.ExecuteSql(string.Format("UPDATE DAT_XS_DOC SET FLAG = 'R' WHERE SEQNO = '{0}' AND FLAG = 'N'", docSEQNO.Text)) > 0)
                {
                    Alert.Show("单据【" + docSEQNO.Text + "】驳回成功！");
                    OperLog("高值使用", "驳回单据【" + docSEQNO.Text + "】");
                    billOpen(docSEQNO.Text);
                    return;
                }
                else
                {
                    Alert.Show("请刷新界面后重试！", "操作提示", MessageBoxIcon.Warning);
                }
            }
            else
            {
                Alert.Show("单据状态不正确，请检查！", "操作提示", MessageBoxIcon.Warning);
                return;
            }
        }

        protected override void billSave()
        {
            #region 数据有效性验证
            if (docFLAG.SelectedValue != "M" && docFLAG.SelectedValue != "R")
            {
                Alert.Show("非[新单]不能保存！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (PubFunc.FormDataCheck(FormDoc).Length > 0) return;
            List<Dictionary<string, object>> newDict = GridGoods.GetNewAddedList().OrderBy(x => x["GDSEQ"]).ToList();
            if (newDict.Count == 0)
            {
                Alert.Show("请输入商品信息", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            List<Dictionary<string, object>> goodsData = new List<Dictionary<string, object>>();
            //判断是否有空行、批号填写是否符合要求
            for (int i = 0; i < newDict.Count; i++)
            {
                if (!string.IsNullOrWhiteSpace(newDict[i]["GDSEQ"].ToString()) && !string.IsNullOrWhiteSpace(newDict[i]["GDNAME"].ToString()))
                {
                    if (string.IsNullOrWhiteSpace(newDict[i]["PH"].ToString()) || newDict[i]["PH"].ToString() == "\\")
                    {
                        bool isds = newDict[i]["ONECODE"].ToString() != "" && newDict[i]["ONECODE"].ToString().Substring(0, 1) == "1";
                        if (!isds)
                        {
                            GridGoods.SelectedCell = new string[] { i.ToString(), "8" };
                            Alert.Show("商品【" + newDict[i]["GDNAME"].ToString() + "】批号不能为空！！！", "消息提示", MessageBoxIcon.Warning);
                            return;
                        }
                    }
                    //当商品中含有贵重商品信息，即需要赋唯一码时
                    if (newDict[i]["STR2"].ToString() == "Y" && newDict[i]["ONECODE"].ToString() == "")
                    {
                        Alert.Show("商品【" + newDict[i]["GDNAME"].ToString() + "】为贵重商品，请填写商品追溯码！", "消息提示", MessageBoxIcon.Warning);
                        return;
                    }
                    goodsData.Add(newDict[i]);
                }
            }

            if (goodsData.Count == 0)//所有Gird行都为空行时
            {
                Alert.Show("商品信息不能为空", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (DbHelperOra.Exists("SELECT 1 FROM dat_xs_doc where seqno = '" + docBILLNO.Text + "'") && docBILLNO.Enabled)
            {
                Alert.Show("您输入的单号已存在,请检查!");
                return;
            }
            #endregion

            if (PubFunc.StrIsEmpty(docBILLNO.Text))
            {
                docSEQNO.Text = BillSeqGet();
                docBILLNO.Text = docSEQNO.Text;
                docBILLNO.Enabled = false;
            }
            else
            {
                string flg = (string)DbHelperOra.GetSingle(string.Format("SELECT NVL(FLAG,'M') FROM DAT_XS_DOC WHERE SEQNO='{0}'", docBILLNO.Text));
                if (!string.IsNullOrWhiteSpace(flg) && (",M,R").IndexOf(flg) < 0)
                {
                    Alert.Show("您输入的单据号存在重复信息，请重新输入或置空！", "消息提示", MessageBoxIcon.Warning);
                    return;
                }
                else
                {
                    docSEQNO.Text = docBILLNO.Text;
                    docBILLNO.Enabled = false;
                }
            }
            MyTable mtType = new MyTable("DAT_XS_DOC");
            mtType.ColRow = PubFunc.FormDataHT(FormDoc);
            mtType.ColRow["SEQNO"] = docBILLNO.Text;
            mtType.ColRow.Add("BILLTYPE", BillType);
            mtType.ColRow.Add("SUBNUM", goodsData.Count);
            mtType.ColRow.Add("XSTYPE", "1");
            mtType.ColRow["FLAG"] = "M";

            List<CommandInfo> cmdList = new List<CommandInfo>();
            MyTable mtTypeMx = new MyTable("DAT_XS_COM");
            MyTable mtTypeExt = new MyTable("DAT_XS_EXT");

            //先删除单据信息在插入
            cmdList.Add(new CommandInfo("delete DAT_XS_DOC where seqno='" + docBILLNO.Text + "'", null));//删除单据台头
            cmdList.Add(new CommandInfo("delete DAT_XS_COM where seqno='" + docBILLNO.Text + "'", null));//删除单据明细
            //cmdList.Add(new CommandInfo("delete DAT_XS_EXT where  BILLNO='" + docBILLNO.Text + "'", null));//删除单据台头
            cmdList.AddRange(mtType.InsertCommand());
            for (int i = 0; i < goodsData.Count; i++)
            {
                mtTypeMx.ColRow = PubFunc.GridDataGet(goodsData[i]);
                if (PubFunc.StrIsEmpty(mtTypeMx.ColRow["BZSL"].ToString()) || mtTypeMx.ColRow["BZSL"].ToString() == "0")
                {
                    Alert.Show("商品【" + mtTypeMx.ColRow["GDSEQ"] + " | " + mtTypeMx.ColRow["GDNAME"] + "】【使用数】为0或空，无法进行【高值商品使用】操作。");
                    return;
                }

                mtTypeMx.ColRow.Add("SEQNO", docBILLNO.Text);
                mtTypeMx.ColRow["ROWNO"] = i + 1;
                mtTypeMx.ColRow.Add("PHID", mtTypeMx.ColRow["PH"]);
                mtTypeMx.ColRow["DHSL"] = decimal.Parse(mtTypeMx.ColRow["BZHL"].ToString()) * decimal.Parse(mtTypeMx.ColRow["BZSL"].ToString());
                mtTypeMx.ColRow["HSJE"] = decimal.Parse(mtTypeMx.ColRow["HSJJ"].ToString()) * decimal.Parse(mtTypeMx.ColRow["BZSL"].ToString()) * decimal.Parse(mtTypeMx.ColRow["BZHL"].ToString());

                mtTypeMx.ColRow.Add("XSSL", goodsData[i]["DHSL"].ToString());
                mtTypeMx.ColRow.Add("BHSJJ", 0);
                mtTypeMx.ColRow.Add("BHSJE", 0);

                mtTypeMx.ColRow.Remove("UNITNAME");
                mtTypeMx.ColRow.Remove("PRODUCERNAME");

                cmdList.Add(mtTypeMx.Insert());

                //mtTypeExt.ColRow["DEPTID"] = docDEPTID.SelectedValue;
                //mtTypeExt.ColRow["BILLNO"] = docBILLNO.Text;
                //mtTypeExt.ColRow["ROWNO"] = i + 1;
                //mtTypeExt.ColRow["ONECODE"] = goodsData[i]["ONECODE"].ToString();
                //mtTypeExt.ColRow["GDSEQ"] = goodsData[i]["GDSEQ"].ToString();
                //mtTypeExt.ColRow["GDNAME"] = goodsData[i]["GDNAME"].ToString();
                //// mtTypeExt.ColRow.Add("BARCODE", goodsData[i]["GDNAME"].ToString());
                //mtTypeExt.ColRow["UNIT"] = goodsData[i]["UNIT"];
                //mtTypeExt.ColRow["GDSPEC"] = goodsData[i]["GDSPEC"];
                //mtTypeExt.ColRow["PH"] = goodsData[i]["PH"];
                //if (goodsData[i]["RQ_SC"] != null && !string.IsNullOrWhiteSpace(goodsData[i]["RQ_SC"].ToString()))
                //{
                //    mtTypeExt.ColRow["RQ_SC"] = DateTime.Parse(goodsData[i]["RQ_SC"].ToString()).ToString("yyyy-MM-dd");
                //}
                //if (goodsData[i]["YXQZ"] != null && !string.IsNullOrWhiteSpace(goodsData[i]["YXQZ"].ToString()))
                //{
                //    mtTypeExt.ColRow["YXQZ"] = DateTime.Parse(goodsData[i]["YXQZ"].ToString()).ToString("yyyy-MM-dd");
                //}
                //mtTypeExt.ColRow["DEPTCUR"] = docDEPTID.SelectedValue;
                //mtTypeExt.ColRow["FLAG"] = "N";
                //mtTypeExt.ColRow["OPERUSER"] = UserAction.UserID;
                //mtTypeExt.ColRow["OPERDATE"] = DateTime.Now.ToString();
                //mtTypeExt.ColRow["PATIENT"] = goodsData[i]["CUSTID"];
                //mtTypeExt.ColRow["OPTDATE"] = DateTime.Now.ToString();
                //mtTypeExt.ColRow["OPTID"] = docOPTID.Text.Trim();
                //mtTypeExt.ColRow["OPTDOCTOR"] = docDOCTOR.Text.Trim();
                //mtTypeExt.ColRow["INSTIME"] = DateTime.Now.ToString();
                //mtTypeExt.ColRow["BZHL"] = goodsData[i]["BZHL"];
                //cmdList.Add(mtTypeExt.Insert());
            }
            //商品使用信息在保存之后即进行审核操作
            //OracleParameter[] parameters = {
            //                                   new OracleParameter("VTASKID", OracleDbType.Varchar2,20),
            //                                   new OracleParameter("VPARA", OracleDbType.Varchar2,800) };
            //parameters[0].Value = BillType;
            //parameters[1].Value = "'" + docBILLNO.Text + "','" + BillType + "','" + UserAction.UserID + "','AUDIT'";
            //cmdList.Add(new CommandInfo("P_EXECTASK", parameters, CommandType.StoredProcedure));

            if (DbHelperOra.ExecuteSqlTran(cmdList))
            {
                Alert.Show("商品使用信息保存成功！");
                OperLog("高值使用", "修改单据【" + docBILLNO.Text + "】");
                //billNew();
                //billLockDoc(true);
                billOpen(docSEQNO.Text);
                if (!string.IsNullOrWhiteSpace(trbONECODE.Text))
                {
                    trbONECODE.Text = "";
                }
            }
        }
        /// <summary>
        /// FineUIPro.Grid控件数据加载
        /// </summary>
        /// <param name="row">要加载的行数据</param>
        /// <param name="firstRow">是否插入指定行</param>
        /// <param name="flag">数据来源：NEW-从数据库中获得，用于商品新增时；OLD-从销售单据明细中获得，用于修改或审核时</param>
        private void LoadGridRow(DataRow row, bool firstRow = true, string flag = "NEW")
        {
            //if (flag == "NEW")
            //{
            //    if (!string.IsNullOrWhiteSpace(row["UNIT_SELL"].ToString()))
            //    {
            //        if (row["UNIT_SELL"].ToString() == "D")//出库单位为大包装时
            //        {
            //            if (!string.IsNullOrWhiteSpace(row["NUM_DABZ"].ToString()) && row["NUM_DABZ"].ToString() != "0")
            //            {
            //                row["UNIT"] = row["UNIT_DABZ"];
            //                row["UNITNAME"] = row["UNIT_DABZ_NAME"];
            //                row["BZHL"] = row["NUM_DABZ"];
            //                int price = 0, number = 0;
            //                int.TryParse(row["HSJJ"].ToString(), out price);
            //                int.TryParse(row["NUM_DABZ"].ToString(), out number);
            //                row["HSJJ"] = price * number;
            //            }
            //        }
            //        else if (row["UNIT_SELL"].ToString() == "Z")//出库单位为中包装时
            //        {
            //            if (!string.IsNullOrWhiteSpace(row["NUM_ZHONGBZ"].ToString()) && row["NUM_ZHONGBZ"].ToString() != "0")
            //            {
            //                row["UNIT"] = row["UNIT_ZHONGBZ"];
            //                row["UNITNAME"] = row["UNIT_ZHONGBZ_NAME"];
            //                row["BZHL"] = row["NUM_ZHONGBZ"];
            //                int price = 0, number = 0;
            //                int.TryParse(row["HSJJ"].ToString(), out price);
            //                int.TryParse(row["NUM_ZHONGBZ"].ToString(), out number);
            //                row["HSJJ"] = price * number;
            //            }
            //        }
            //    }
            //}

            PubFunc.GridRowAdd(GridGoods, row, firstRow);
        }

        protected void Window1_Close(object sender, WindowCloseEventArgs e)
        {
            DataTable dt = GetGoods(hfdValue.Text);
            //dt.Columns.Remove(dt.Columns["BZHL"]);
            if (dt != null && dt.Rows.Count > 0)
            {
                dt.Columns["PIZNO"].ColumnName = "PZWH";
                dt.Columns["UNITNAME"].ColumnName = "UNITSMALLNAME";
                dt.Columns["UNIT_SELL_NAME"].ColumnName = "UNITNAME";
                dt.Columns["UNIT_SELL"].ColumnName = "UNIT";
                dt.Columns["BZHL_SELL"].ColumnName = "BZHL";

                dt.Columns.Add("PH", Type.GetType("System.String"));
                dt.Columns.Add("RQ_SC", Type.GetType("System.String"));
                dt.Columns.Add("YXQZ", Type.GetType("System.String"));
                dt.Columns.Add("MEMO", Type.GetType("System.String"));
                dt.Columns.Add("BZSL", Type.GetType("System.Int32"));
                dt.Columns.Add("DHSL", Type.GetType("System.Int32"));
                dt.Columns.Add("KCSL", Type.GetType("System.Int32"));
                dt.Columns.Add("HSJE", Type.GetType("System.Double"));
                dt.Columns.Add("STR2", Type.GetType("System.String"));
                string msg = "";
                string msg1 = "";
                foreach (DataRow row in dt.Rows)
                {
                    row["BZSL"] = "1";
                    row["DHSL"] = "1";
                    row["KCSL"] = "0";
                    row["HSJE"] = Convert.ToDecimal(row["BZSL"]) * Convert.ToDecimal(row["BZHL"]) * Convert.ToDecimal(row["HSJJ"]);
                    ////越库商品不进行库存、批号带入
                    //if (DbHelperOra.Exists(string.Format("SELECT 1 FROM DOC_GOODS WHERE GDSEQ = '{0}' AND ISFLAG3 = 'N'", row["GDSEQ"].ToString())))
                    //{
                    DataTable dtPH = Doc.GetGoodsPHKC(row["GDSEQ"].ToString(), docDEPTID.SelectedValue);
                    if (dtPH != null && dtPH.Rows.Count > 0)
                    {
                        if (dtPH.Rows[0]["KCSL"].ToString() == "0")
                        {
                            msg += row["GDNAME"] + ",";
                            continue;
                        }
                        row["PH"] = dtPH.Rows[0]["PH"];
                        row["PZWH"] = dtPH.Rows[0]["PZWH"];
                        row["RQ_SC"] = dtPH.Rows[0]["RQ_SC"];
                        row["YXQZ"] = dtPH.Rows[0]["YXQZ"];
                        row["KCSL"] = dtPH.Rows[0]["KCSL"];
                        //row["STR2"] = (dtPH.Rows[0]["ISFLAG3"] ?? "");
                    }
                    else
                    {
                        msg += row["GDNAME"] + ",";
                        continue;
                    }
                    //}
                    //else
                    //{
                    //    row["STR2"] = "Y";
                    //}
                    if (string.IsNullOrWhiteSpace(row["HSJJ"].ToString()) || row["HSJJ"].ToString() == "0")
                    {
                        msg1 += "【" + row["GDSEQ"].ToString() + " | " + row["GDNAME"].ToString() + "】,";
                        Alert.Show("商品" + msg1 + "【含税进价】为空，不能进行【高值商品使用】操作。", "消息提示", MessageBoxIcon.Warning);
                        continue;
                    }
                    row["HSJJ"] = Math.Round(Convert.ToDecimal(row["HSJJ"]) * Convert.ToDecimal(row["BZHL"]), 4);
                    LoadGridRow(row, false);
                }
                if (!string.IsNullOrWhiteSpace(msg))
                {
                    Alert.Show(string.Format("商品【{0}】在部门『{1}』中没有库存,不能进行录入！", msg, docDEPTID.SelectedText), "消息提示", MessageBoxIcon.Warning);
                }
            }
            else
            {
                Alert.Show("系统传值错误！！！", "消息提示", MessageBoxIcon.Warning);
            }
        }

        protected void trbEditorGDSEQ_TriggerClick(object sender, EventArgs e)
        {
            //string code = trbEditorGDSEQ.Text;
            //string dept = docDEPTID.SelectedValue;

            //if (!string.IsNullOrWhiteSpace(code) && code.Trim().Length >= 2)
            //{
            //    DataTable dt_goods = Doc.GetGoods_His(code, "", dept);

            //    if (dt_goods != null && dt_goods.Rows.Count > 0)
            //    {
            //        dt_goods.Columns.Add("ONECODE", Type.GetType("System.String"));
            //        dt_goods.Columns.Add("BZSL", Type.GetType("System.Int32"));
            //        dt_goods.Columns.Add("DHSL", Type.GetType("System.Int32"));
            //        dt_goods.Columns.Add("KCSL", Type.GetType("System.Int32"));
            //        dt_goods.Columns.Add("HSJE", Type.GetType("System.Double"));
            //        dt_goods.Columns.Add("STR2", Type.GetType("System.String"));
            //        DataRow dr_goods = dt_goods.Rows[0];
            //        dr_goods["BZSL"] = "0";
            //        dr_goods["DHSL"] = "0";
            //        dr_goods["DHSL"] = "0";
            //        dr_goods["HSJE"] = "0";

            //        DataTable dtPH = Doc.GetGoodsPHKC(code, docDEPTID.SelectedValue);
            //        if (dtPH != null && dtPH.Rows.Count > 0)
            //        {
            //            if (dtPH.Rows[0]["KCSL"].ToString() == "0")
            //            {
            //                Alert.Show(string.Format("商品【{1}】在{0}中没有库存，不能进行录入！", docDEPTID.SelectedText, code), MessageBoxIcon.Warning);
            //                PubFunc.GridRowAdd(GridGoods, "CLEAR");
            //                return;
            //            }
            //            if (dtPH.Rows.Count == 1)
            //            {
            //                dr_goods["PH"] = dtPH.Rows[0]["PH"];
            //                dr_goods["PZWH"] = dtPH.Rows[0]["PIZNO"];
            //                dr_goods["RQ_SC"] = dtPH.Rows[0]["RQ_SC"];
            //                dr_goods["YXQZ"] = dtPH.Rows[0]["YXQZ"];
            //                dr_goods["KCSL"] = dtPH.Rows[0]["KCSL"];
            //            }
            //            else
            //            {
            //                hfdRowIndex.Text = GridGoods.SelectedCell[0].ToString();
            //                GridLot.DataSource = dtPH;
            //                GridLot.DataBind();
            //                WindowLot.Hidden = false;
            //            }
            //        }
            //        else
            //        {
            //            Alert.Show(string.Format("商品【{1}】在{0}中没有库存，不能进行使用确认！", docDEPTID.SelectedText, code), MessageBoxIcon.Warning);
            //            PubFunc.GridRowAdd(GridGoods, "CLEAR");
            //            return;
            //        }
            //        LoadGridRow(dr_goods);
            //    }
            //    else
            //    {
            //        Alert.Show(string.Format("{0}尚未配置商品【{1}】！！！", docDEPTID.SelectedText, code), MessageBoxIcon.Warning);
            //        PubFunc.GridRowAdd(GridGoods, "CLEAR");
            //    }
            //}
        }

        protected void btnClosePostBack_Click(object sender, EventArgs e)
        {
            bool firstRow = true;
            foreach (GridRow row in GridLot.Rows)
            {
                int rowIndex = row.RowIndex;
                System.Web.UI.WebControls.TextBox tbxNumber = (System.Web.UI.WebControls.TextBox)GridLot.Rows[rowIndex].FindControl("tbxNumber");
                if (!string.IsNullOrWhiteSpace(tbxNumber.Text) && tbxNumber.Text != "0")
                {
                    string[] strCell = GridGoods.SelectedCell;
                    Dictionary<string, object> newDict = GridGoods.GetNewAddedList()[Convert.ToInt16(strCell[0])];
                    newDict["PH"] = row.Values[3];
                    newDict["YXQZ"] = row.Values[4];
                    newDict["PZWH"] = row.Values[6];
                    newDict["RQ_SC"] = row.Values[5];
                    newDict["KCSL"] = row.Values[7];
                    newDict["BZSL"] = tbxNumber.Text;
                    if (firstRow)
                    {
                        firstRow = false;
                        PageContext.RegisterStartupScript(GridGoods.GetUpdateCellValueReference(strCell[0], strCell[1], GetJObject(newDict).ToString()));
                    }
                    else
                    {
                        PageContext.RegisterStartupScript(GridGoods.GetAddNewRecordReference(GetJObject(newDict)));
                    }
                }
            }
            WindowLot.Hidden = true;
        }

        protected void trbONECODE_TriggerClick(object sender, EventArgs e)
        {
            if (trbONECODE.Text.Trim().Length < Doc.LENCODE()) return;
            if ((",0,1,2").IndexOf(trbONECODE.Text.Substring(0, 1)) < 1)
            {
                Alert.Show("您扫描或输入的条码信息错误,请检查！", "提示信息", MessageBoxIcon.Warning);
                trbONECODE.Text = string.Empty;
                trbONECODE.Focus();
                return;
            }
            if (trbONECODE.Text.Substring(0, 1) == "2")
            {
                //验证唯一码是否可用
                string sql = @"SELECT F_GETDEPTNAME(DEPTCUR) DEPTNAME,DEPTCUR,
                                           FLAG,DECODE(FLAG,
                                                      'N',
                                                      '未使用',
                                                      'Y',
                                                      '已入库',
                                                      'T',
                                                      '已库房退货',
                                                      'C',
                                                      '已出库',
                                                      'R',
                                                      '库房退货',
                                                      'G',
                                                      '已使用') FLAGCH
                                          FROM DAT_GZ_EXT
                                         WHERE (UPPER(ONECODE) = UPPER('{0}') OR UPPER(STR1) = UPPER('{0}')) ";
                DataTable dtDept = DbHelperOra.Query(String.Format(sql, trbONECODE.Text.Trim())).Tables[0];
                if (dtDept != null && dtDept.Rows.Count == 1)
                {
                    if (string.IsNullOrWhiteSpace(docDEPTID.SelectedValue))
                    {
                        docDEPTID.SelectedValue = dtDept.Rows[0]["DEPTCUR"].ToString();
                    }

                    if (dtDept.Rows[0]["FLAG"].ToString() != "C")
                    {
                        Alert.Show("您输入的追溯码当前状态【" + dtDept.Rows[0]["FLAGCH"].ToString() + "】,扫描条码的正确状态应为【已出库】，请检查！", "提示信息", MessageBoxIcon.Warning);
                        trbONECODE.Text = string.Empty;
                        trbONECODE.Focus();
                        return;
                    }
                }
                else
                {
                    Alert.Show("您输入的追溯码信息获取错误,请检查！", "提示信息", MessageBoxIcon.Warning);
                    trbONECODE.Text = string.Empty;
                    trbONECODE.Focus();
                    return;
                }
            }
            else
            {
                //检查条码状态
                string table = "DAT_GOODSDS_LOG";
                if (trbONECODE.Text.Trim().Substring(0, 1) == "0")
                {
                    table = "DAT_CK_BARCODE";
                }
                if (!DbHelperOra.Exists("SELECT 1 FROM " + table + " WHERE UPPER(BARCODE) = UPPER('" + trbONECODE.Text.Trim() + "') AND FLAG = 'N'"))
                {
                    Alert.Show("扫描条码不存在或已被回收!", "操作提示", MessageBoxIcon.Warning);
                    trbONECODE.Text = "";
                    trbONECODE.Focus();
                    return;
                }
                if (PubFunc.StrIsEmpty(docDEPTID.SelectedValue))
                {
                    docDEPTID.SelectedValue = Doc.ONECODE(trbONECODE.Text.Trim(), "DEPTIN", table);
                }
                //else
                //{
                //    if (docDEPTID.SelectedValue != Doc.ONECODE(trbONECODE.Text.Trim(), "DEPTIN", table))
                //    {
                //        Alert.Show("扫描条码非【" + docDEPTID.SelectedText + "】的条码,请检查!", "操作提示", MessageBoxIcon.Warning);
                //        trbONECODE.Text = "";
                //        trbONECODE.Focus();
                //        return;
                //    }
                //}
            }

            decimal sum = 0; //计算合计数量
            List<Dictionary<string, object>> newDict = GridGoods.GetNewAddedList().ToList();
            for (int i = 0; i < newDict.Count; i++)
            {
                string barcode_old = newDict[i]["ONECODE"].ToString();
                if (barcode_old == trbONECODE.Text.Trim())
                {
                    Alert.Show("条码已扫描，请检查!", "提示信息", MessageBoxIcon.Warning);
                    trbONECODE.Text = "";
                    trbONECODE.Focus();
                    return;
                }
                sum += Convert.ToDecimal(newDict[i]["HSJE"].ToString());
            }
            //增加表体信息
            docDEPTID.Enabled = false;
            string gdseq = string.Empty;
            if (trbONECODE.Text.Trim().Substring(0, 1) == "2")
            {
                gdseq = Doc.ONECODE_GZ(trbONECODE.Text.Trim(), "GDSEQ");
            }
            else
            {
                string table = "DAT_GOODSDS_LOG";
                if (trbONECODE.Text.Trim().Substring(0, 1) == "0")
                {
                    table = "DAT_CK_BARCODE";
                }
                gdseq = Doc.ONECODE(trbONECODE.Text.Trim(), "GDSEQ", table);
            }
            if (!string.IsNullOrWhiteSpace(gdseq) && gdseq.Trim().Length >= 2)
            {
                DataTable dt_goods = new DataTable();
                dt_goods = Doc.GetGoods_Gather(gdseq, "", docDEPTID.SelectedValue);
                if (dt_goods != null && dt_goods.Rows.Count > 0)
                {
                    dt_goods.Columns.Add("ROWNO", Type.GetType("System.Int32"));
                    dt_goods.Columns.Add("ONECODE", Type.GetType("System.String"));
                    dt_goods.Columns.Add("BZSL", Type.GetType("System.Int32"));
                    dt_goods.Columns.Add("DHSL", Type.GetType("System.Int32"));

                    dt_goods.Columns.Add("KCSL", Type.GetType("System.Int32"));
                    dt_goods.Columns.Add("HSJE", Type.GetType("System.Double"));
                    DataRow dr_goods = dt_goods.Rows[0];
                    dr_goods["ROWNO"] = newDict.Count + 1;
                    dr_goods["ONECODE"] = trbONECODE.Text.Trim().ToUpper();
                    if (trbONECODE.Text.Trim().Substring(0, 1) == "2")
                    {
                        dr_goods["DHSL"] = Doc.ONECODE_GZ(trbONECODE.Text.Trim(), "BZHL");
                        //直接从唯一码跟踪明细表 去批号和库存数量
                        dr_goods["PH"] = Doc.ONECODE_GZ(trbONECODE.Text.Trim(), "PH");
                        dr_goods["YXQZ"] = Doc.ONECODE_GZ(trbONECODE.Text.Trim(), "YXQZ");
                        dr_goods["RQ_SC"] = Doc.ONECODE_GZ(trbONECODE.Text.Trim(), "RQ_SC");
                    }
                    else
                    {
                        //取得数量
                        string sql_num = "SELECT DSHL*SL FROM DAT_GOODSDS_LOG WHERE UPPER(BARCODE) = UPPER('" + trbONECODE.Text.Trim() + "') and FLAG = 'N'";
                        if (trbONECODE.Text.Trim().Substring(0, 1) == "0")
                        {
                            sql_num = "SELECT DHSL FROM DAT_CK_BARCODE WHERE UPPER(BARCODE) = UPPER('" + trbONECODE.Text.Trim() + "') and FLAG = 'N'";
                            dr_goods["PH"] = Doc.ONECODE(trbONECODE.Text.Trim(), "PH", "DAT_CK_BARCODE");
                            dr_goods["YXQZ"] = Doc.ONECODE(trbONECODE.Text.Trim(), "YXQZ", "DAT_CK_BARCODE");
                            dr_goods["RQ_SC"] = Doc.ONECODE(trbONECODE.Text.Trim(), "RQ_SC", "DAT_CK_BARCODE");
                        }
                        string dhnum = DbHelperOra.GetSingle(sql_num).ToString();
                        dr_goods["DHSL"] = dhnum;
                    }
                    dr_goods["BZSL"] = dr_goods["DHSL"];
                    dr_goods["KCSL"] = "0";
                    dr_goods["HSJE"] = Convert.ToDecimal(dr_goods["HSJJ"]) * Convert.ToDecimal(dr_goods["BZSL"]) * Convert.ToDecimal(dr_goods["BZHL"]);


                    PubFunc.GridRowAdd(GridGoods, dr_goods, false);
                    //计算合计数量
                    sum += Convert.ToDecimal(dr_goods["HSJE"].ToString());

                    JObject summary = new JObject();
                    summary.Add("GDNAME", "本页合计");
                    summary.Add("HSJE", sum.ToString("F2"));
                    GridGoods.SummaryData = summary;
                }
                else
                {
                    Alert.Show(string.Format("{0}尚未配置商品【{1}】！！！", docDEPTID.SelectedText, gdseq), MessageBoxIcon.Warning);
                    trbONECODE.Text = string.Empty;
                    trbONECODE.Focus();
                    return;
                }
            }
            trbONECODE.Text = string.Empty;
            trbONECODE.Focus();
        }

        protected void btnClose_Click(object sender, EventArgs e)
        {
            WindowLot.Hidden = true;
        }

        protected void GridLot_RowDoubleClick(object sender, FineUIPro.GridRowClickEventArgs e)
        {
            DataTable dt_goods = new DataTable();
            dt_goods = Doc.GetGoods_Gather(GridLot.DataKeys[e.RowIndex][4].ToString(), "", docDEPTID.SelectedValue);
            if (dt_goods.Rows.Count <= 0)
            {
                Alert.Show("查询数据更新失败!", "提示信息", MessageBoxIcon.Warning);
                return;
            }

            dt_goods.Columns.Add("ONECODE", Type.GetType("System.String"));
            dt_goods.Columns.Add("CUSTID", Type.GetType("System.String"));
            dt_goods.Columns.Add("BZSL", Type.GetType("System.Int32"));
            dt_goods.Columns.Add("DHSL", Type.GetType("System.Int32"));
            dt_goods.Columns.Add("KCSL", Type.GetType("System.Int32"));
            dt_goods.Columns.Add("HSJE", Type.GetType("System.Double"));

            dt_goods.Rows[0]["ONECODE"] = saveOnecode.Text;
            dt_goods.Rows[0]["CUSTID"] = savecustid.Text;
            dt_goods.Rows[0]["DHSL"] = DbHelperOra.GetSingle(string.Format("SELECT BZHL FROM DAT_DD_EXT WHERE ONECODE = '{0}'", saveOnecode.Text)).ToString();
            dt_goods.Rows[0]["BZSL"] = dt_goods.Rows[0]["DHSL"];
            dt_goods.Rows[0]["KCSL"] = (GridLot.DataKeys[e.RowIndex][3].ToString());
            if (GridLot.DataKeys[e.RowIndex][0] == null || string.IsNullOrEmpty(GridLot.DataKeys[e.RowIndex][0].ToString()))
            {
                dt_goods.Rows[0]["PH"] = "";
            }
            else
            {
                dt_goods.Rows[0]["PH"] = (GridLot.DataKeys[e.RowIndex][0].ToString());
            }
            if (GridLot.DataKeys[e.RowIndex][1] == null || string.IsNullOrEmpty(GridLot.DataKeys[e.RowIndex][1].ToString()))
            {
                dt_goods.Rows[0]["YXQZ"] = "";
            }
            else
            {
                dt_goods.Rows[0]["YXQZ"] = (GridLot.DataKeys[e.RowIndex][1].ToString());
            }
            if (GridLot.DataKeys[e.RowIndex][2] == null || string.IsNullOrEmpty(GridLot.DataKeys[e.RowIndex][2].ToString()))
            {
                dt_goods.Rows[0]["RQ_SC"] = "";
            }
            else
            {
                dt_goods.Rows[0]["RQ_SC"] = (GridLot.DataKeys[e.RowIndex][2].ToString());
            }

            dt_goods.Rows[0]["HSJE"] = Convert.ToDecimal(dt_goods.Rows[0]["HSJJ"]) * Convert.ToDecimal(dt_goods.Rows[0]["BZSL"]) * Convert.ToDecimal(dt_goods.Rows[0]["BZHL"]);

            LoadGridRow(dt_goods.Rows[0], true, "OLD");
            WindowLot.Hidden = true;
        }

        protected void GridList_Sort(object sender, GridSortEventArgs e)
        {
            highlightRows.Text = "";
            highlightRowYellow.Text = "";
            highRedlightRows.Text = "";
            GridList.SortDirection = e.SortDirection;
            GridList.SortField = e.SortField;

            DataTable table = PubFunc.GridDataGet(GridList);
            DataView view1 = table.DefaultView;
            view1.Sort = String.Format("{0} {1}", GridList.SortField, GridList.SortDirection);
            GridList.DataSource = view1;
            GridList.DataBind();
        }

        #region 高值条码处理
        protected void btnScan_Click(object sender, EventArgs e)
        {
            //越库商品不允许退货？
            if ((",N").IndexOf(docFLAG.SelectedValue) < 0)
            {
                Alert.Show("非『新单』单据不允许操作！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (PubFunc.StrIsEmpty(docSEQNO.Text))
            {
                Alert.Show("请保存单据后进行扫描追溯码操作！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (!DbHelperOra.Exists(string.Format("SELECT 1 FROM DAT_XS_COM A,DOC_GOODS B WHERE A.GDSEQ = B.GDSEQ AND B.ISGZ = 'Y' AND SEQNO = '{0}'", docSEQNO.Text)))
            {
                Alert.Show("此单据中没有已经保存的高值商品,请检查！", "消息提示", MessageBoxIcon.Warning);
                return;
            }

            WindowScan.Hidden = false;
            ScanSearch("SHOW");
        }
        protected void ScanSearch(string type)
        {
            string sql = "";
            if (type == "SHOW")
            {
                sql = "SELECT A.*,f_getunitname(A.UNIT) UNITNAME FROM DAT_XS_EXT A WHERE A.BILLNO = '{0}' ORDER BY A.GDSEQ,A.INSTIME DESC";
            }
            else
            {
                sql = "SELECT A.*,f_getunitname(A.UNIT) UNITNAME FROM DAT_XS_EXT A WHERE A.BILLNO = '{0}' ORDER BY A.INSTIME DESC";
            }
            DataTable dtScan = DbHelperOra.Query(string.Format(sql, docSEQNO.Text)).Tables[0];
            //PubFunc.GridRowAdd(GridSacn, dtScan);
            GridSacn.DataSource = dtScan;
            GridSacn.DataBind();
            zsmScan.Text = String.Empty;
            zsmScan.Focus();
        }
        protected void zsmScan_TextChanged(object sender, EventArgs e)
        {
            string flag = DbHelperOra.GetSingle("SELECT FLAG FROM DAT_XS_DOC WHERE BILLNO ='" + docBILLNO.Text.Trim() + "'").ToString();
            if ((",M,R").IndexOf(docFLAG.SelectedValue) < 0)
            {
                Alert.Show("非『新单』单据不允许操作！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (zsmScan.Text.Length < 28) return;
            if (zsmScan.Text.Substring(0, 1) != "2")
            {
                Alert.Show("您扫描的条码不是贵重码,请检查！", "提示信息", MessageBoxIcon.Warning);
                zsmScan.Text = string.Empty;
                zsmScan.Focus();
                return;
            }
            if (!DbHelperOra.Exists(string.Format("SELECT 1 FROM DAT_XS_EXT WHERE ONECODE = '{0}' AND FLAG = 'Y'", zsmScan.Text)))
            {
                Alert.Show("您输入的追溯码未被使用或已退货,请检查！", "提示信息", MessageBoxIcon.Warning);
                zsmScan.Text = string.Empty;
                zsmScan.Focus();
                return;
            }
            //写入数据库中
            string sSQL = string.Format(@"INSERT INTO DAT_XS_EXT(DEPTID,BILLNO,ROWNO,ONECODE,GDSEQ,GDNAME,BARCODE,UNIT,GDSPEC,DEPTCUR,BZHL,INSTIME,PH,RQ_SC,YXQZ)
                    SELECT '{0}','{1}',NVL((SELECT MAX(ROWNO)+1 FROM DAT_CK_EXT WHERE BILLNO = '{1}'),1),'{2}',GDSEQ,GDNAME,BARCODE,UNIT,GDSPEC,DEPTCUR,BZHL,SYSDATE,PH,RQ_SC,YXQZ
                    FROM DAT_CK_EXT A
                    WHERE A.ONECODE = '{2}' AND ROWNO = 1", docDEPTID.SelectedValue, docBILLNO.Text, zsmScan.Text.Trim());
            DbHelperOra.ExecuteSql(sSQL);
            ScanSearch("");
        }

        protected void zsmDelete_Click(object sender, EventArgs e)
        {
            if ((",M").IndexOf(docFLAG.SelectedValue) < 0)
            {
                Alert.Show("非『新增』单据不允许操作！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (GridSacn.SelectedCell == null)
            {
                Alert.Show("请选择您需要删除的数据！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            string onecode = (GridSacn.DataKeys[GridSacn.SelectedRowIndex][0]).ToString();
            DbHelperOra.ExecuteSql(string.Format("DELETE FROM DAT_XS_EXT WHERE ONECODE = '{0}'", onecode));
            ScanSearch("");
        }
        #endregion

        protected void btnTJ_Click(object sender, EventArgs e)
        {
            if (PubFunc.StrIsEmpty(docSEQNO.Text))
            {
                Alert.Show("请选择需要操作的单据！", "操作提示", MessageBoxIcon.Warning);
                return;
            }
            if (docFLAG.SelectedValue == "M")
            {
                if (DbHelperOra.ExecuteSql(string.Format("UPDATE DAT_XS_DOC SET FLAG = 'N' WHERE SEQNO = '{0}' AND FLAG = 'M'", docSEQNO.Text)) > 0)
                {
                    Alert.Show("单据【" + docSEQNO.Text + "】提交成功！");
                    OperLog("高值使用", "提交单据【" + docSEQNO.Text + "】");
                    billOpen(docSEQNO.Text);
                    return;
                }
                else
                {
                    Alert.Show("请刷新界面后重试！", "操作提示", MessageBoxIcon.Warning);
                }
            }
            else
            {
                Alert.Show("单据状态不正确，请检查！", "操作提示", MessageBoxIcon.Warning);
                return;
            }
        }

        protected void GridList_RowDataBound(object sender, GridRowEventArgs e)
        {
            DataRowView row = e.DataItem as DataRowView;
            if (row != null)
            {
                string flag = row["FLAG"].ToString();
                if (flag == "M")
                {
                    highlightRows.Text += e.RowIndex.ToString() + ",";
                }
                if (flag == "N")
                {
                    highlightRowYellow.Text += e.RowIndex.ToString() + ",";
                }
                if (flag == "R")
                {
                    highRedlightRows.Text += e.RowIndex.ToString() + ",";
                }

                if (Request.QueryString["oper"] != null && Request.QueryString["oper"].ToString() == "audit")
                {
                    int num = int.Parse(row["PRINTNUM"].ToString());
                    if (num > 0)
                    {
                        highlightRowsNavajo.Text += e.RowIndex.ToString() + ",";
                        e.RowAttributes["data-color"] = "color1";
                    }
                }
            }
        }

        string optSql = @"SELECT HZ.BRID PATIENT_ID,SH.OPER_ID,SH.OPER_NAME,SH.SURGEON,SH.FID,
                                              HZ.XM AS NAME,HZ.KSDM,'' AS CONSULTING_DOCTOR,HZ.SFZH AS FCaridID
                                    FROM [VI_ZYBRJBXXK] HZ LEFT JOIN  V_NIS_OPERATION_S SH
                                       ON HZ.BRID = SH.[PATIENT_ID]  ";
        private void HisInfoDataGet()
        {
            if (ckbALL.Checked)
            {
                optSql = optSql + " WHERE 1=1 ";
            }
            else
            {
                optSql = optSql + " WHERE HZ.CYPB='0'";
            }
            string Stch = string.Empty;
            if (hfdFLAG.Text == "N")
            {
                //手术ID
                if (docOPTID.Text.Trim().Length < 1)
                    Stch = string.Format(" AND SH.FID LIKE '%{0}%'", docOPTID.Text);
                //医生
                if (docDOCTOR.Text.Trim().Length < 1)
                    Stch = string.Format(" AND SH.SURGEON LIKE '%{0}%'", docDOCTOR.Text);
                //住院号
                if (docSTR6.Text.Trim().Length < 1)
                    Stch = string.Format(" AND HZ.BRID LIKE '%{0}%'", docSTR6.Text);
                //患者
                if (docCUSTID.Text.Trim().Length < 1)
                    Stch = string.Format(" AND HZ.XM LIKE '%{0}%'", docCUSTID.Text);
                //身份证
                if (docSTR2.Text.Trim().Length < 1)
                    Stch = string.Format(" AND HZ.SFZH LIKE '%{0}%'", docSTR2.Text);
            }
            else
            {
                if (!string.IsNullOrWhiteSpace(trbSearch.Text))
                {
                    Stch = string.Format(" AND (SH.OPER_NAME LIKE '%{0}%' OR HZ.BRID LIKE '%{0}%' OR SH.SURGEON LIKE '%{0}%' OR HZ.XM LIKE '%{0}%' OR HZ.SFZH LIKE '%{0}%')", trbSearch.Text);
                }
            }

            string sql = @"SELECT TOP {1} *
                                  FROM (SELECT ROW_NUMBER() OVER(ORDER BY PATIENT_ID DESC) AS RowNumber,* FROM ({0}) AS B) AS A
                                 WHERE RowNumber > {1} * {2}";
            string msg = string.Empty;
            int total = 0;
            int.TryParse(SqlServerHelper.GetSingle(out msg, "SELECT COUNT(1) FROM (" + optSql + Stch + ") AS A").ToString(), out total);
            DataTable Dt = SqlServerHelper.GetDataTable(out msg, string.Format(sql, optSql + Stch, GridHis.PageSize, GridHis.PageIndex));
            GridHis.DataSource = Dt;
            GridHis.RecordCount = total;
            GridHis.DataBind();
        }
        protected void docOPTID_TriggerClick(object sender, EventArgs e)
        {
            //手术ID
            if (docOPTID.Text.Trim().Length < 1) return;
            hfdFLAG.Text = "N";
            HisInfoDataGet();
            WindowHis.Hidden = false;
        }
        protected void docDOCTOR_TriggerClick(object sender, EventArgs e)
        {
            //医生
            if (docDOCTOR.Text.Trim().Length < 1) return;
            hfdFLAG.Text = "N";
            HisInfoDataGet();
            WindowHis.Hidden = false;
        }

        protected void docSTR6_TriggerClick(object sender, EventArgs e)
        {
            //住院号
            if (docSTR6.Text.Trim().Length < 1) return;
            hfdFLAG.Text = "N";
            hfdFLAG.Text = "N";
            //HisInfoDataGet();
            //WindowHis.Hidden = false;
            string zyh = docSTR6.Text.Trim();
            if (zyh.Length == 6)
            {
                zyh = "30" + zyh;
            }
            string strSql = optSql + string.Format(" WHERE HZ.BRID LIKE '%{0}'", zyh);
            string msg = string.Empty;
            DataTable Dt = SqlServerHelper.GetDataTable(out msg, strSql);
            if (Dt != null && Dt.Rows.Count > 0)
            {
                string dept = (DbHelperOra.GetSingle(string.Format("SELECT CODE FROM SYS_DEPT WHERE STR1='{0}'", (Dt.Rows[0]["KSDM"] ?? "").ToString())) ?? "").ToString();
                if (!string.IsNullOrWhiteSpace(dept))
                {
                    docDEPTID.SelectedValue = dept;
                }
                docCUSTID.Text = (Dt.Rows[0]["NAME"] ?? "").ToString();
                docOPTID.Text = (Dt.Rows[0]["FID"] ?? "").ToString();
                docSTR6.Text = (Dt.Rows[0]["PATIENT_ID"] ?? "").ToString();
                docDOCTOR.Text = (Dt.Rows[0]["CONSULTING_DOCTOR"] ?? "").ToString();
                docSTR2.Text = (Dt.Rows[0]["FCARIDID"] ?? "").ToString();
                docOPTTABLE.Text = (Dt.Rows[0]["OPER_ID"] ?? "").ToString();
                trbONECODE.Focus();
            }
            else
            {
                Alert.Show("没有该患者信息！！！", "异常提醒", MessageBoxIcon.Warning);
            }
        }

        protected void docCUSTID_TriggerClick(object sender, EventArgs e)
        {
            //患者
            if (docCUSTID.Text.Trim().Length < 1) return;
            hfdFLAG.Text = "N";
            HisInfoDataGet();
            WindowHis.Hidden = false;
        }

        protected void docSTR2_TriggerClick(object sender, EventArgs e)
        {
            //身份证
            if (docSTR2.Text.Trim().Length < 1) return;
            hfdFLAG.Text = "N";
            HisInfoDataGet();
            WindowHis.Hidden = false;
        }

        protected void GridHis_RowDoubleClick(object sender, GridRowClickEventArgs e)
        {
            //赋值
            if (e.RowIndex < 0) return;
            string dept = (DbHelperOra.GetSingle(string.Format("SELECT CODE FROM SYS_DEPT WHERE STR1='{0}'", (GridHis.DataKeys[e.RowIndex][7] ?? "").ToString())) ?? "").ToString();
            if (!string.IsNullOrWhiteSpace(dept))
            {
                docDEPTID.SelectedValue = dept;
            }
            docOPTID.Text = (GridHis.DataKeys[e.RowIndex][0] ?? "").ToString();
            docDOCTOR.Text = (GridHis.DataKeys[e.RowIndex][4] ?? "").ToString();
            docSTR6.Text = (GridHis.DataKeys[e.RowIndex][1] ?? "").ToString();
            docCUSTID.Text = (GridHis.DataKeys[e.RowIndex][2] ?? "").ToString();
            docSTR2.Text = (GridHis.DataKeys[e.RowIndex][3] ?? "").ToString();
            docOPTTABLE.Text = (GridHis.DataKeys[e.RowIndex][5] ?? "").ToString();
            WindowHis.Hidden = true;
            hfdFLAG.Text = "N";
        }

        protected void btnCse_Click(object sender, EventArgs e)
        {
            WindowHis.Hidden = true;
        }

        protected void btnExtract_Click(object sender, EventArgs e)
        {
            hfdFLAG.Text = "Y";
            trbSearch.Text = "";
            HisInfoDataGet();
            WindowHis.Hidden = false;
        }

        protected void GridHis_PageIndexChange(object sender, GridPageEventArgs e)
        {
            GridHis.PageIndex = e.NewPageIndex;
            HisInfoDataGet();
        }

        protected void trbSearch_TriggerClick(object sender, EventArgs e)
        {
            hfdFLAG.Text = "Y";
            HisInfoDataGet();
        }

        protected void btnPrintAll_Click(object sender, EventArgs e)
        {
            hfdSEQNO.Text = "";
            int[] selections = GridList.SelectedRowIndexArray;
            if (GridList.SelectedRowIndexArray.Length <= 0)
            {
                Alert.Show("请选择要打印的单据信息！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            string seqnos = string.Empty;
            foreach (int rowIndex in selections)
            {
                seqnos += GridList.DataKeys[rowIndex][0].ToString() + ",";
                if (DbHelperOra.Exists("SELECT 1 FROM SYS_FUNCPRNNUM WHERE FUNCNO = '" + GridList.DataKeys[rowIndex][0].ToString() + "' "))
                {
                    DbHelperOra.GetSingle("UPDATE SYS_FUNCPRNNUM T SET T.FUNCTIME = T.FUNCTIME+1 WHERE T.FUNCNO='" + GridList.DataKeys[rowIndex][0].ToString() + "'");
                }
                else
                {
                    DbHelperOra.GetSingle("INSERT INTO SYS_FUNCPRNNUM (OPER,FUNCID,FUNCNO,FUNCTIME,OPERUSER) VALUES ('P',SUBSTR('" + GridList.DataKeys[rowIndex][0].ToString() + "',0,3),'" + GridList.DataKeys[rowIndex][0].ToString() + "',1,'" + UserAction.UserID + "')");
                }
            }
            hfdSEQNO.Text = seqnos.TrimEnd(',').Replace(",", "','");
            PageContext.RegisterStartupScript("PrintAll();");
        }
    }
}