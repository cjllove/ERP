using FineUIPro;
using Newtonsoft.Json.Linq;
using XTBase;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace SPDProject.SpdInventory
{
    public partial class InventoryPlan : BillBase
    {
        private string strDocSql = "SELECT a.* FROM dat_pdplan_doc a WHERE a.SEQNO ='{0}'";
        private string strLisSQL = "SELECT a.*,decode(flag,'N','新单','Y','已审核','S','已完结','R','已驳回','已提交') FLAGNAME FROM dat_pdplan_com a WHERE SEQNO = '{0}' ORDER by a.ROWNO ASC";
        public InventoryPlan()
        {
            BillType = "PJD";
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                DataInit();
                billNew();
            }
        }

        private void DataInit()
        {
            ButtonHidden(btnCancel, btnCopy, btnAddRow);
            PubFunc.DdlDataGet("DDL_USER", ddlLRY, ddlSPR, ddlSHR, ddlCZY);
            PubFunc.DdlDataGet(ddlReject, "DDL_BILL_REASON");
        }
        protected override void billNew()
        {
            tbxBILLNO.Text = String.Empty;
            tbxMEMO.Text = String.Empty;
            ddlFLAG.SelectedValue = "N";
            dpkPDRQ.Enabled = true;
            tbxBILLNO.Enabled = true;
            tbxMEMO.Enabled = true;
            GridGoods.SummaryData = null;
            dpkSHRQ.SelectedDate = null;
            dpkSPRQ.SelectedDate = null;
            ddlSHR.SelectedValue = "";
            ddlSPR.SelectedValue = "";
            ddlPDTYPE.Enabled = true;
            ddlPDTYPE.SelectedValue = "1";
            ddlISPH.Enabled = true;
            ddlISPH.SelectedValue = "Y";
            ddlCZY.Enabled = true;
            lstLRRQ1.SelectedDate = DateTime.Now.AddDays(-1);
            lstLRRQ2.SelectedDate = DateTime.Now;
            dpkPDRQ.SelectedDate = DateTime.Now;
            dpkLRRQ.SelectedDate = DateTime.Now;
            ddlLRY.SelectedValue = UserAction.UserID;
            ddlCZY.SelectedValue = UserAction.UserID;
            PageContext.RegisterStartupScript(GridGoods.GetRejectChangesReference());
            btnDel.Enabled = false;
            btnSave.Enabled = true;
            btnAudit.Enabled = false;
            btnDelRow.Enabled = true;
            btnPrint.Enabled = true;

        }
        protected override void billDel()
        {
            if (tbxBILLNO.Text.Trim() == "" || tbxBILLNO.Enabled == true)
            {
                Alert.Show("请选择需要删除的单据");
                return;
            }
            if (ddlFLAG.SelectedValue != "N")
            {
                Alert.Show("非新单不能删除!");
                return;
            }
            DbHelperOra.ExecuteSql("Delete from dat_pdplan_com t WHERE T.SEQNO ='" + tbxBILLNO.Text.Trim() + "'");
            DbHelperOra.ExecuteSql("Delete from dat_pdplan_doc t WHERE T.SEQNO ='" + tbxBILLNO.Text.Trim() + "'");
            Alert.Show("单据删除成功!");
            billNew();
            billSearch();
            OperLog("盘点计划", "删除单据【" + tbxBILLNO.Text.Trim() + "】");
        }
        protected override void billDelRow()
        {
            if (ddlFLAG.SelectedValue != "N")
            {
                Alert.Show("非新增单据不能删除！");
                return;
            }
            if (GridGoods.SelectedCell == null) return;
            int rowIndex = GridGoods.SelectedRowIndex;
            GridGoods.DeleteSelectedRows();
        }
        protected override void billClear()
        {
            PubFunc.FormDataClear(Formlist);
            lstLRRQ1.SelectedDate = DateTime.Now;
            lstLRRQ2.SelectedDate = DateTime.Now;
        }
        protected override void billSearch()
        {
            if (lstLRRQ1.SelectedDate == null || lstLRRQ2.SelectedDate == null)
            {
                Alert.Show("请输入条件【盘点日期】！", MessageBoxIcon.Warning);
                return;
            }
            string strSql = @"select a.*,F_GETUSERNAME(LRY) LRYNAME,F_GETUSERNAME(SPR) SPRNAME,decode(FLAG,'N','新单','Y','已审核','S','已完结','R','已驳回','已提交') FLAGNAME,DECODE(PDTYPE,'1','普通盘点','2','动销盘点','3','月末盘点','4','APP盘点','未定义') PDTYPENAME from dat_pdplan_doc a where 1=1 ";
            string strSearch = "";
            if (lstBILLNO.Text.Length > 0)
            { strSearch += string.Format(" AND SEQNO like '%{0}%'", lstBILLNO.Text); }
            if (lstFLAG.SelectedValue.Length > 0)
            { strSearch += string.Format(" AND FLAG='{0}'", lstFLAG.SelectedValue); }
            strSearch += string.Format(" AND (PDRQ between TO_DATE('{0}','YYYY-MM-DD') and (TO_DATE('{1}','YYYY-MM-DD')) + 1)", lstLRRQ1.Text, lstLRRQ2.Text);
            if (!string.IsNullOrWhiteSpace(strSearch))
            {
                strSql += strSearch;
            }
            strSql += " ORDER BY PDRQ DESC";
            DataTable dtBill = new DataTable();
            dtBill = DbHelperOra.Query(strSql).Tables[0];
            GridList.DataSource = dtBill;
            GridList.DataBind();
        }
        private bool SaveSuccess = false;
        protected override void billAudit()
        {
            if (tbxBILLNO.Text.Length < 1 || ddlFLAG.SelectedValue == "S")
            {
                Alert.Show("请选择需要审核的单据!", "警告提示", MessageBoxIcon.Warning);
                return;
            }
            SaveSuccess = false;
            if (ddlFLAG.SelectedValue == "N")
            {
                save("Y");
                if (SaveSuccess == false)
                    return;
            }
            SaveSuccess = false;

            if (ddlFLAG.SelectedValue == "N")
            {
                if (BillOper(tbxBILLNO.Text, "AUDIT") == 1)
                {
                    billLockDoc(true);
                    Alert.Show("单据【" + tbxBILLNO.Text + "】审核成功,科室盘点单据已自动生成！", "警告提示", MessageBoxIcon.Information);
                    billOpen(tbxBILLNO.Text);
                    OperLog("盘点计划", "审核单据【" + tbxBILLNO.Text + "】");
                }
            }
            //确认调整库存,并写入损益单中
            else if (ddlFLAG.SelectedValue == "Y")
            {
                if (DbHelperOra.Exists("select 1 from dat_pdplan_com WHERE SEQNO = '" + tbxBILLNO.Text + "' and flag ='N'"))
                {
                    Alert.Show("请在所有科室完成盘点后再进行审核！", "警告提示", MessageBoxIcon.Warning);
                    return;
                }

                if (BillOper(tbxBILLNO.Text, "DECLARE") == 1)
                {
                    billLockDoc(true);
                    Alert.Show("单据【" + tbxBILLNO.Text + "】审核成功，已自动生成损益单！");
                    billOpen(tbxBILLNO.Text);
                    OperLog("盘点计划", "审核单据【" + tbxBILLNO.Text + "】");
                }
            }
        }
        protected override void billCancel()
        {
            if (ddlFLAG.SelectedValue != "Y")
            {
                Alert.Show("非盘点完成单据不能驳回！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            WindowReject.Hidden = false;
        }
        protected void btnRejectSubmit_Click(object sender, EventArgs e)
        {
            if (tbxBILLNO.Text.Length < 1)
            { return; }
            string strMemo = "驳回原因：" + ddlReject.SelectedText;
            if (!string.IsNullOrWhiteSpace(txaMemo.Text.Trim()))
            {
                strMemo += "；详细说明：" + txaMemo.Text;
            }
            if (DbHelperOra.ExecuteSql(string.Format("update DAT_PDPLAN_DOC set flag='R',memo='{0}' where seqno='{1}' and flag='Y'", strMemo, tbxBILLNO.Text)) == 1)
            {
                WindowReject.Hidden = true;
                billOpen(tbxBILLNO.Text);
            }
        }
        protected override void listRow_DoubleClick(object sender, FineUIPro.GridRowClickEventArgs e)
        {
            dpkPDRQ.Enabled = false;
            tbxBILLNO.Enabled = false;
            billOpen(GridList.Rows[e.RowIndex].Values[1].ToString());
        }

        protected override void billOpen(string strBillno)
        {
            //表头进行赋值
            DataTable dtDoc = DbHelperOra.Query(string.Format(strDocSql, strBillno)).Tables[0];
            PubFunc.FormDataSet(FormDoc, dtDoc.Rows[0]);
            //表体赋值
            DataTable dtBill = DbHelperOra.Query(string.Format(strLisSQL, strBillno)).Tables[0];
            PageContext.RegisterStartupScript(GridGoods.GetRejectChangesReference());
            decimal bzslTotal = 0, feeTotal = 0, ddslTotal = 0;
            if (dtBill != null && dtBill.Rows.Count > 0)
            {
                foreach (DataRow row in dtBill.Rows)
                {
                    //PubFunc.GridRowAdd(GridGoods, row, false);
                    ddslTotal += Convert.ToDecimal(row["SYSL"]);
                    bzslTotal += Convert.ToDecimal(row["SYHSJE"]);
                    feeTotal += Convert.ToDecimal(row["SYBHSJE"]);
                }
                Doc.GridRowAdd(GridGoods, dtBill);
            }
            TabStrip1.ActiveTabIndex = 1;
            PubFunc.Form2Lock(FormDoc, true);
            //增加合计
            JObject summary = new JObject();
            summary.Add("NAME", "本页合计");
            summary.Add("SYSL", ddslTotal.ToString());
            summary.Add("SYHSJE", bzslTotal.ToString("F2"));
            summary.Add("SYBHSJE", feeTotal.ToString("F2"));
            GridGoods.SummaryData = summary;
            //按钮状态判断
            if (ddlFLAG.SelectedValue == "N")
            {
                btnDel.Enabled = true;
                btnSave.Enabled = true;
                btnAudit.Enabled = true;
                btnDelRow.Enabled = true;
                btnPrint.Enabled = true;
            }
            else if (ddlFLAG.SelectedValue == "Y")
            {
                btnDel.Enabled = false;
                btnSave.Enabled = false;
                btnAudit.Enabled = true;
                btnDelRow.Enabled = false;
                btnPrint.Enabled = false;
            }
            else
            {
                btnDel.Enabled = false;
                btnSave.Enabled = false;
                btnAudit.Enabled = false;
                btnDelRow.Enabled = false;
                btnPrint.Enabled = false;
            }

        }
        protected override void billSave()
        {
            save();
        }

        private void save(string flag = "N")
        {
            #region 检查有效性
            if (("NR").IndexOf(ddlFLAG.SelectedValue) < 0)
            {
                Alert.Show("非新单不能保存！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (Convert.ToDateTime(dpkPDRQ.Text) < Convert.ToDateTime(DateTime.Now.ToShortDateString()))
            {
                Alert.Show("盘点日期不能小于当前日期");
                return;
            }
            List<Dictionary<string, object>> newDict = GridGoods.GetNewAddedList().OrderBy(x => x["CODE"]).ToList();
            List<Dictionary<string, object>> goodsData = new List<Dictionary<string, object>>();
            //判断是否有空行
            if (newDict.Count > 0)
            {
                for (int i = 0; i < newDict.Count; i++)
                {
                    if (!string.IsNullOrWhiteSpace(newDict[i]["CODE"].ToString()) && !string.IsNullOrWhiteSpace(newDict[i]["NAME"].ToString()))
                    {
                        goodsData.Add(newDict[i]);
                    }
                }
            }
            else
            {
                Alert.Show("请追加盘点部门！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            #endregion
            if (PubFunc.StrIsEmpty(tbxBILLNO.Text))
            {
                tbxBILLNO.Text = BillSeqGet();
            }
            MyTable mtType = new MyTable("dat_pdplan_doc");
            mtType.ColRow = PubFunc.FormDataHT(FormDoc);
            mtType.ColRow["SEQNO"] = tbxBILLNO.Text;
            mtType.ColRow["FLAG"] = "N";//所有单据在保存时单据状态一律为新增N
            mtType.ColRow.Add("BILLTYPE", BillType);
            mtType.ColRow.Add("SUBNUM", goodsData.Count);
            //mtType.ColRow.Add("XSTYPE", "1");
            List<CommandInfo> cmdList = new List<CommandInfo>();
            MyTable mtTypeMx = new MyTable("dat_pdplan_com");
            //先删除单据信息在插入
            cmdList.Add(mtType.DeleteCommand(""));//删除单据台头
            cmdList.Add(new CommandInfo("delete dat_pdplan_com where seqno='" + tbxBILLNO.Text + "'", null));//删除单据明细
            cmdList.AddRange(mtType.InsertCommand());
            for (int i = 0; i < goodsData.Count; i++)
            {
                mtTypeMx.ColRow = PubFunc.GridDataGet(goodsData[i]);
                mtTypeMx.ColRow.Add("SEQNO", tbxBILLNO.Text);
                mtTypeMx.ColRow["ROWNO"] = i + 1;
                mtTypeMx.ColRow.Remove("KSWC");
                mtTypeMx.ColRow.Remove("FLAGNAME");
                cmdList.Add(mtTypeMx.Insert());
            }
            DbHelperOra.ExecuteSqlTran(cmdList);
            tbxBILLNO.Enabled = false;
            if(flag == "N")
                Alert.Show("单据保存成功");
            billOpen(tbxBILLNO.Text);
            OperLog("盘点计划", "修改单据【" + tbxBILLNO.Text + "】");
            SaveSuccess = true;
        }

        protected void btnadd_Click(object sender, EventArgs e)
        {
            //if (PubFunc.FormDataCheck(FormDoc).Length > 1) return;
            tgbDept.Text = "";
            PubFunc.Form2Lock(FormDoc, true);
            string sql = @"select  SP.*,f_getusername(manager) managername from  SYS_DEPT SP WHERE  SP.FLAG='Y'
                            and F_CHK_DATARANGE(CODE, '{0}') = 'Y' 
                        ORDER BY SP.CODE";
            GridLot.DataSource = DbHelperOra.Query(String.Format(sql, UserAction.UserID)).Tables[0];
            GridLot.DataBind();
            WindowLot.Hidden = false;
        }
        protected void btnClosePostBack_Click(object sender, EventArgs e)
        {
            int[] selections = GridLot.SelectedRowIndexArray;
            string err = "";
            foreach (int rowIndex in selections)
            {
                //GridLot.DataKeys[rowIndex][0];
                DataTable dtDoc = DbHelperOra.Query(string.Format("SELECT CODE,NAME,'N' FLAG,'新单' FLAGNAME,f_getusername(MANAGER) PERSON,'0' SYSL,'0' SYHSJE,'0' SYBHSJE,'' KSWC,'' MEMO FROM SYS_DEPT WHERE CODE ='{0}'", GridLot.DataKeys[rowIndex][0])).Tables[0];
                foreach (DataRow row in dtDoc.Rows)
                {
                    if (dept_exis(row))
                    {
                        err = "[" + row["CODE"].ToString() + "]";
                        continue;
                    }
                    PubFunc.GridRowAdd(GridGoods, row, false);
                }
            }
            WindowLot.Hidden = true;
            if (err.Length > 0)
            { Alert.Show("您选择的部门编码" + err + "已存在!"); }
        }
        protected void GridGoods_RowDoubleClick(object sender, FineUIPro.GridRowClickEventArgs e)
        {
            string err = "";
            //GridLot.DataKeys[rowIndex][0];
            DataTable dtDoc = DbHelperOra.Query(string.Format("SELECT CODE,NAME,'N' FLAG,'新单' FLAGNAME,f_getusername(MANAGER) PERSON,'0' SYSL,'0' SYHSJE,'0' SYBHSJE,'' KSWC,'' MEMO FROM SYS_DEPT WHERE CODE ='{0}'", GridLot.DataKeys[e.RowIndex][0])).Tables[0];
            foreach (DataRow row in dtDoc.Rows)
            {
                if (dept_exis(row))
                {
                    err = "[" + row["CODE"].ToString() + "]";
                    continue;
                }
                PubFunc.GridRowAdd(GridGoods, row, false);
            }
            WindowLot.Hidden = true;
            if (err.Length > 0)
            { Alert.Show("您选择的部门编码" + err + "已存在!"); }
        }
        protected override void billAddRow()
        {
            if (ddlFLAG.SelectedValue != "N")
            {
                Alert.Show("非『新增』单据不能增行！", "消息提示", MessageBoxIcon.Warning);
                return;
            }
            if (PubFunc.FormDataCheck(FormDoc).Length > 1) return;
            billLockDoc(true);
            PubFunc.GridRowAdd(GridGoods, "INIT");
        }
        protected void btnClose_Click(object sender, EventArgs e)
        {
            WindowLot.Hidden = true;
        }

        //验证部门是否重复
        protected bool dept_exis(DataRow row)
        {
            string dept_new = row["CODE"].ToString();
            List<Dictionary<string, object>> newDict = GridGoods.GetNewAddedList().ToList();
            for (int i = 0; i < newDict.Count; i++)
            {
                if (dept_new == newDict[i]["CODE"].ToString())
                {
                    return true;
                }
                //if (DbHelperOra.Exists("select 1 from dat_pdplan_doc a,dat_pdplan_com b where a.seqno=b.seqno and a.flag in('Y','R','N') and b.code='" + dept_new + "'"))
                //{
                //    return true;
                //}
                //改为界面验证，保存触发cjl

            }
            return false;
        }
        protected void GridList_RowDataBound(object sender, GridRowEventArgs e)
        {
            DataRowView row = e.DataItem as DataRowView;
            if (row != null)
            {
                string flag = row["FLAG"].ToString();
                FineUIPro.BoundField flagcol = GridList.FindColumn("FLAGNAME") as FineUIPro.BoundField;
                if (flag == "N")
                {
                    e.CellAttributes[flagcol.ColumnIndex]["data-color"] = "color1";
                }
                if (flag == "Y")
                {
                    e.CellAttributes[flagcol.ColumnIndex]["data-color"] = "color2";
                }
            }
        }

        protected void GridList_Sort(object sender, GridSortEventArgs e)
        {
            GridList.SortDirection = e.SortDirection;
            GridList.SortField = e.SortField;

            DataTable table = PubFunc.GridDataGet(GridList);
            DataView view1 = table.DefaultView;
            view1.Sort = String.Format("{0} {1}", GridList.SortField, GridList.SortDirection);
            GridList.DataSource = view1;
            GridList.DataBind();

        }

        protected void ddlPDTYPE_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddlPDTYPE.SelectedValue == "2")
            {
                dpkBEGINRQ.Enabled = true;
                dpkENDRQ.Enabled = true;
                dpkBEGINRQ.SelectedDate = DateTime.Now.AddMonths(-1);
                dpkENDRQ.SelectedDate = DateTime.Now;
            }
            else
            {
                dpkBEGINRQ.Enabled = false;
                dpkENDRQ.Enabled = false;
                dpkBEGINRQ.SelectedDate = null;
                dpkENDRQ.SelectedDate = null;
            }
        }

        protected void btnSch_Click(object sender, EventArgs e)
        {
            string sql = @"select  SP.*,f_getusername(manager) managername from  SYS_DEPT SP WHERE  SP.FLAG='Y'
                            and F_CHK_DATARANGE(CODE, '{0}') = 'Y' ";
            if (tgbDept.Text.Trim().Length > 0)
            {
                sql += String.Format(" AND （SP.CODE LIKE '%{0}%' OR SP.NAME LIKE '%{0}%'）", tgbDept.Text.Trim());
            }
            GridLot.DataSource = DbHelperOra.Query(String.Format(sql + " ORDER BY SP.CODE", UserAction.UserID)).Tables[0];
            GridLot.DataBind();
        }
    }
}