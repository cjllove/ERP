using FineUIPro;
using Newtonsoft.Json.Linq;
using XTBase;
using XTBase.Utilities;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace SPDProject.SpdXM.WH_SLYY
{
    public partial class TwoStorageInvoicing : PageBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BindDDL();
            }
        }
        private void BindDDL()
        {
            dpkBEGRQ.SelectedDate = DateTime.Now.AddMonths(-1);
            dpkENDRQ.SelectedDate = DateTime.Now;
            dpkTime1.SelectedDate = DateTime.Now.AddMonths(-1);
            dpkTime2.SelectedDate = DateTime.Now;
            dpkRQ1.SelectedDate = DateTime.Now.AddMonths(-1);
            dpkRQ2.SelectedDate = DateTime.Now;

            string strSql = @"select * from 
                                    (SELECT '' CODE,'--请选择--' NAME,0 TreeLevel,0 islast FROM dual
                                    union all
                                    select code,
                                           '【' || code || '】' || name name,
                                           class TreeLevel,
                                           decode(islast, 'Y', 1, 0) islast
                                      from sys_category
                                     ORDER BY code)
                                     ORDER BY DECODE(CODE,'',99,0) DESC ,CODE ASC ";
            List<CategoryTreeBean> myList = new List<CategoryTreeBean>();
            DataTable categoryTreeTable = DbHelperOra.Query(strSql).Tables[0];
            foreach (DataRow dr in categoryTreeTable.Rows)
            {
                myList.Add(new CategoryTreeBean(dr["code"].ToString(), dr["name"].ToString(), Convert.ToInt16(dr["TreeLevel"]), Convert.ToInt16(dr["islast"]) == 1));
            }
            ddlCATID.EnableSimulateTree = true;
            ddlCATID.DataTextField = "Name";
            ddlCATID.DataValueField = "Id";
            ddlCATID.DataSimulateTreeLevelField = "Level";
            ddlCATID.DataSource = myList;
            ddlCATID.DataBind();
            USERID.Text = UserAction.UserID;
            
            DepartmentBind.BindDDL("DDL_SYS_DEPTRANGE", UserAction.UserID, ddlDEPTID, ddlListDEPTID, ddlDEPTIDGD);
        }
        protected void btClear_Click(object sender, EventArgs e)
        {
            
        }
        private System.Text.StringBuilder searSql(string deptid, string BEGRQ, string ENDRQ)
        {
            string qcSql = "", qmSql = "", dept = "";
            if (!string.IsNullOrWhiteSpace(ddlDEPTID.SelectedValue))
            {
                dept = " AND DEPTID='" + deptid + "'";
            }
            if (Convert.ToDateTime(BEGRQ).ToString("yyyy-MM-dd") == DateTime.Now.ToString("yyyy-MM-dd"))
            {
                qcSql = string.Format(@"SELECT GDSEQ, DEPTID, SUM(KCSL) QCKCSL, SUM(KCHSJJ * KCSL) QCKCJE
                                  FROM DAT_GOODSSTOCK
                                 WHERE DEPTID IN(SELECT CODE FROM SYS_DEPT WHERE TYPE IN('1', '2')) {0}
                                 GROUP BY GDSEQ, DEPTID", dept);
            }
            else
            {
                qcSql = string.Format(@"SELECT GDSEQ, DEPTID, SUM(KCSL) QCKCSL, SUM(KCHSJJ * KCSL) QCKCJE
                                  FROM DAT_STOCKDAY
                                 WHERE DEPTID IN (SELECT CODE FROM SYS_DEPT WHERE TYPE IN ('3', '4'))
                                 AND RQ = {0} {1}
                                 GROUP BY GDSEQ, DEPTID", "to_date('" + dpkBEGRQ.Text + "','yyyy-MM-dd') - 1", dept);
            }
            if (DateTime.Parse(Convert.ToDateTime(ENDRQ).ToString("yyyy-MM-dd")) >= DateTime.Parse(DateTime.Now.ToString("yyyy-MM-dd")))
            {
                qmSql = string.Format(@"SELECT GDSEQ, DEPTID, SUM(KCSL) QMKCSL, SUM(KCHSJJ * KCSL) QMKCJE
                                  FROM DAT_GOODSSTOCK
                                 WHERE DEPTID IN(SELECT CODE FROM SYS_DEPT WHERE TYPE IN('3', '4')) {0}
                                 GROUP BY GDSEQ, DEPTID", dept);
            }
            else
            {
                qmSql = string.Format(@"SELECT GDSEQ, DEPTID, SUM(KCSL) QMKCSL, SUM(KCHSJJ * KCSL) QMKCJE
                                  FROM DAT_STOCKDAY
                                 WHERE DEPTID IN (SELECT CODE FROM SYS_DEPT WHERE TYPE IN ('3', '4'))
                                 AND TO_CHAR(RQ,'YYYY-MM-DD')='{0}'  {1}
                                 GROUP BY GDSEQ, DEPTID", ENDRQ, dept);
            }

            System.Text.StringBuilder sbSql = new System.Text.StringBuilder();
            sbSql.AppendFormat(@"SELECT JXC.DEPTID,G.GDSEQ, G.GDNAME, G.GDSPEC, F_GETUNITNAME(G.UNIT) UNIT,
                                                           NVL(QC.QCKCSL, 0) QCKCSL,
                                                           NVL(QC.QCKCJE, 0) QCKCHSJE,
                                                           NVL(JXC.CGRK, 0) CGRK,
                                                           NVL(JXC.KSTH, 0) KSTH,
                                                           NVL(JXC.PYRK, 0) PYRK,
                                                           NVL(JXC.PYRK,0) * G.HSJJ PYHSJE,
                                                           (NVL(JXC.CGRK, 0) + NVL(JXC.PYRK, 0)) * G.HSJJ RKHSJE,
                                                           NVL(JXC.KSRK, 0) KSRK,
                                                           NVL(JXC.KSCK, 0) KSCK,
                                                           NVL(JXC.THCK, 0) THCK,
                                                           NVL(JXC.PKCK, 0) PKCK,
                                                           NVL(JXC.PYRK, 0) + NVL(JXC.PKCK, 0) PYPKKCSL,
                                                           (NVL(JXC.PYRK, 0) + NVL(JXC.PKCK, 0)) * G.HSJJ PYPKHSJE,
                                                           NVL(JXC.PKCK,0) * G.HSJJ PKHSJE,
                                                            (NVL(JXC.KSCK, 0) + NVL(JXC.PKCK, 0)) CKSL,
                                                           (NVL(JXC.KSCK, 0) + NVL(JXC.PKCK, 0)) * G.HSJJ CKHSJE,
                                                           NVL(JXC.KSRK,0) * G.HSJJ SLHSJE,
                                                           NVL(JXC.KSCK,0) * G.HSJJ XHHSJE,
                                                           NVL(QM.QMKCSL, 0) QMKCSL,
                                                           NVL(QM.QMKCJE, 0) QMKCHSJE
                                          FROM ({0}) QC,
                                               (SELECT GDSEQ, DEPTID,
                                                       SUM(DECODE(A.KCADD, '1', DECODE(A.BILLTYPE, 'RKD', SL, 0), 0)) CGRK,
                                                       - (SUM(DECODE(A.KCADD,
                                                                  '-1',
                                                                  DECODE(A.BILLTYPE,
                                                                         'LTD',
                                                                         SL,
                                                                         'XST',
                                                                         SL,
                                                                         'DST',
                                                                         SL,
                                                                         'DBD',
                                                                         SL,
                                                                         0),
                                                                  0))) KSTH,
                                                       SUM(DECODE(A.KCADD, '1', DECODE(A.BILLTYPE, 'SYD', SL, 0), 0)) PYRK,
                                                       SUM(DECODE(A.KCADD,
                                                                    '1',
                                                                    DECODE(A.BILLTYPE,
                                                                           'LCD',
                                                                           SL,
                                                                           'CKD',
                                                                           SL,
                                                                           'DSC',
                                                                           SL,
                                                                           'KSD',
                                                                           SL,
                                                                           0),
                                                                    0)) KSRK,
                                                       SUM(DECODE(A.KCADD,
                                                                    '-1',
                                                                    DECODE(A.BILLTYPE,
                                                                           'XSD',
                                                                           SL,
                                                                           'XSG',
                                                                           SL,
                                                                           'DSH',
                                                                           SL,
                                                                           'KSD',
                                                                           SL,
                                                                           0),
                                                                    0)) KSCK,
                                                       - (SUM(DECODE(A.KCADD,
                                                                    '-1',
                                                                    DECODE(A.BILLTYPE, 'THD', SL, 0),
                                                                    0))) THCK,
                                                       - (SUM(DECODE(A.KCADD,
                                                                    '-1',
                                                                    DECODE(A.BILLTYPE, 'SYD', SL, 0),
                                                                    0))) PKCK
                                                  FROM DAT_GOODSJXC A
                                                 WHERE A.RQSJ > (TO_DATE('{3}', 'YYYY-MM-DD'))
                                                   AND A.RQSJ <= (TO_DATE('{4}', 'YYYY-MM-DD')) + 1
                                                   AND A.DEPTID IN
                                                       (SELECT CODE FROM SYS_DEPT WHERE TYPE IN ('3', '4')) {2}
                                                 GROUP BY GDSEQ, DEPTID) JXC,
                                               ({1}) QM,
                                               DOC_GOODS G
                                         WHERE G.GDSEQ = QC.GDSEQ(+)
                                           AND G.GDSEQ = JXC.GDSEQ(+)
                                           AND G.GDSEQ = QM.GDSEQ ", qcSql, qmSql, dept, BEGRQ, ENDRQ);

            if (!PubFunc.StrIsEmpty(ddlCATID.SelectedValue))
            {
                sbSql.Append(" AND G.CATID = '" + ddlCATID.SelectedValue + "'");
            }

            if (!string.IsNullOrWhiteSpace(ddlDEPTID.SelectedValue))
            {
                sbSql.Append(" AND JXC.DEPTID = '" + ddlDEPTID.SelectedValue + "'");
            }

            if (!PubFunc.StrIsEmpty(tbxGOODS.Text))
            {
                sbSql.AppendFormat(" AND (G.GDSEQ LIKE '%{0}%' OR UPPER(G.ZJM) LIKE UPPER('%{0}%') OR G.GDNAME LIKE '%{0}%')", tbxGOODS.Text);
            }
            if (!PubFunc.StrIsEmpty(ddlISGZ.SelectedValue))
            {
                sbSql.AppendFormat(" AND G.ISGZ = '{0}'", ddlISGZ.SelectedValue);
            }

            sbSql.AppendFormat(" AND JXC.DEPTID IN( SELECT CODE FROM SYS_DEPT WHERE F_CHK_DATARANGE(CODE, '{0}') = 'Y' )", UserAction.UserID);
            sbSql.Append(" ORDER BY G.GDSEQ");

            return sbSql;
        }
        private string GetSearchSql()
        {

            System.Text.StringBuilder sbSql = new System.Text.StringBuilder();
            sbSql = searSql(ddlDEPTID.SelectedValue, string.Format("{0:yyyy-MM-dd}", dpkBEGRQ.SelectedDate), string.Format("{0:yyyy-MM-dd}", dpkENDRQ.SelectedDate));

            
                string sql = @"SELECT deptid,f_getdeptname(deptid) deptname,
                                                   SUM(QCKCSL) QCKCSL,
                                                   SUM(QCKCHSJE) QCKCHSJE,--期初库存金额
                                                   SUM(CGRK) CGRK,
                                                   SUM(KSTH) KSTH,
                                                   SUM(PYRK) PYRK,
                                                   SUM(RKHSJE) RKHSJE,
                                                   SUM(KSCK) KFCK,
                                                   SUM(THCK) THCK,
                                                   SUM(PKCK) PKCK,
                                                   SUM(SLHSJE) SLHSJE,--申领金额
                                                   SUM(CKHSJE) CKHSJE,
                                                   SUM(CKHSJE) XHHSJE,--消耗金额
                                                   SUM(PYHSJE) PYHSJE,--盘盈金额
                                                   SUM(PKHSJE) PKHSJE,--盘亏金额
                                                   SUM(QMKCSL) QMKCSL,
                                                   SUM(QMKCHSJE) QMKCHSJE --结存金额
                                              FROM(" + sbSql.ToString() + @")
                                             GROUP BY deptid";
                return sql;
            
        }

        protected void btSearch_Click(object sender, EventArgs e)
        {
            DataSearch();
        }
        private void DataSearch()
        {

            //if (RQXZ.Text.Trim() == "" || RQXZ.Text.Length != 7)
            //{
            //    Alert.Show("请选择有效时间！");
            //    return;
            //}

            //DateTime time = DateTime.Parse(RQXZ.Text + "-01");
            int total = 0;
            DataTable dtData = PubFunc.DbGetPage(GridDeptList.PageIndex, GridDeptList.PageSize, GetSearchSql(), ref total);
            GridDeptList.RecordCount = total;
            GridDeptList.DataSource = dtData;
            GridDeptList.DataBind();
            OutputSummaryData(dtData);
        }
        protected void GridList_PageIndexChange(object sender, GridPageEventArgs e)
        {
            GridList.PageIndex = e.NewPageIndex;
            DataSearch();
        }
        public static void CleanItemForDDL(string CleanName, FineUIPro.DropDownList dropDownList)
        {
            //用于取消下拉表中不需要的选项
            int GetItem = 0;
            foreach (FineUIPro.ListItem item in dropDownList.Items)
            {
                if (item.Text == CleanName)
                {
                    dropDownList.Items.RemoveAt(GetItem);
                    break;
                }
                else
                {
                    if (item.Value == CleanName)
                    {
                        dropDownList.Items.RemoveAt(GetItem);
                        break;
                    }
                }
                GetItem++;
            }
        }
        protected void btExport_Click(object sender, EventArgs e)
        {
            //if (RQXZ.Text.Trim() == "" || RQXZ.Text.Length != 7)
            //{
            //    Alert.Show("请选择有效时间！");
            //    return;
            //}
            //string time = RQXZ.Text;
            //string year = time.Substring(0, 4);
            //int yearnum = Convert.ToInt32(year);
            //string month = time.Substring(5, 2);
            //int monthnum = Convert.ToInt32(month);
            //if (yearnum < 2000 || yearnum > 9999 || monthnum < 1 || monthnum > 12)
            //{
            //    Alert.Show("请选择有效时间！");
            //    return;
            //}
            //DateTime dtSj = DateTime.Parse(RQXZ.Text + "-01");
            //DataTable dt = DbHelperOra.Query(GetSearchSql(dtSj.AddDays(-1).ToString("yyyyMMdd"), dtSj.AddMonths(1).AddDays(-1).ToString("yyyyMMdd"))).Tables[0];

            //if (dt == null || dt.Rows.Count == 0)
            //{
            //    Alert.Show("暂时没有符合要求的数据，无法导出", "消息提示", MessageBoxIcon.Warning);
            //    return;
            //}
            //ExcelHelper.ExportByWeb(dt, "库房商品数量进销存明细报表", string.Format("库房商品数量进销存明细报表_{0}.xls", DateTime.Now.ToString("yyyyMMdd")));
            //btnExport.Enabled = true;
        }

        protected void GridList_Sort(object sender, GridSortEventArgs e)
        {
            GridList.SortDirection = e.SortDirection;
            GridList.SortField = e.SortField;

            DataSearch();
        }

        private void OutputSummaryData(DataTable source)
        {
            int QCKCSLSUM = 0;
            int SLHSJESUM = 0;
            int XHHSJESUM = 0;
            int PYHSJESUM = 0;
            int PKHSJESUM = 0;
            int QMKCHSJESUM = 0;
            foreach (DataRow row in source.Rows)
            {
                QCKCSLSUM += Convert.ToInt32(row["QCKCHSJE"]);
                SLHSJESUM += Convert.ToInt32(row["SLHSJE"]);
                XHHSJESUM += Convert.ToInt32(row["XHHSJE"]);
                PYHSJESUM += Convert.ToInt32(row["PYHSJE"]);
                PKHSJESUM += Convert.ToInt32(row["PKHSJE"]);
                QMKCHSJESUM += Convert.ToInt32(row["QMKCHSJE"]);
            }
            JObject summary = new JObject();
            summary.Add("GDSEQ", "汇总：");
            summary.Add("QCKCHSJE", QCKCSLSUM.ToString());
            summary.Add("SLHSJE", SLHSJESUM.ToString());
            summary.Add("XHHSJE", XHHSJESUM.ToString());
            summary.Add("PYHSJE", PYHSJESUM.ToString());
            summary.Add("PKHSJE", PKHSJESUM.ToString());
            summary.Add("QMKCHSJE", QMKCHSJESUM.ToString());
            GridDeptList.SummaryData = summary;

        }
        private void OutputSummaryData2(DataTable source)
        {
            int QCKCSLSUM = 0;
            int KSRKSUM = 0;
            int KSCKSUM = 0;
            int PYPKKCSLSUM = 0;
            foreach (DataRow row in source.Rows)
            {
                QCKCSLSUM += Convert.ToInt32(row["QCKCHSJE"]);
                KSRKSUM += Convert.ToInt32(row["SLHSJE"]);
                KSCKSUM += Convert.ToInt32(row["XHHSJE"]);
                PYPKKCSLSUM += Convert.ToInt32(row["PYPKHSJE"]);
            }
            JObject summary = new JObject();
            summary.Add("GDSEQ", "汇总：");
            summary.Add("QCKCHSJE", QCKCSLSUM.ToString());
            summary.Add("SLHSJE", KSRKSUM.ToString());
            summary.Add("XHHSJE", KSCKSUM.ToString());
            summary.Add("PYPKHSJE", PYPKKCSLSUM.ToString());
            GridList.SummaryData = summary;

        }

        protected void docSearch_TriggerClick(object sender, EventArgs e)
        {

        }

        protected void GridGoods_PageIndexChange(object sender, GridPageEventArgs e)
        {

        }

        protected void GridList_RowDoubleClick(object sender, GridRowClickEventArgs e)
        {
            string strGDSEQ = GridList.Rows[e.RowIndex].DataKeys[0].ToString();
            docSearch.Text = strGDSEQ;
            dpkRQ1.SelectedDate = dpkBEGRQ.SelectedDate;
            dpkRQ2.SelectedDate = dpkENDRQ.SelectedDate;
            ddlDEPTIDGD.SelectedValue = ddlListDEPTID.SelectedValue;
            dbOpen(docSearch.Text, ddlDEPTIDGD.SelectedValue, string.Format("{0:yyyyMMdd}", dpkRQ1.SelectedDate), string.Format("{0:yyyyMMdd}", dpkRQ2.SelectedDate));
        }
        private void dbOpen(string gdseq,string deptid, string rq1, string rq2)
        {
            string strSql = string.Format(@"select * from (
select a.deptid,a.gdseq,a.rqsj,a.billtype,
DECODE(a.billtype,
'RKD', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，库房【'|| f_getdeptname(a.deptid) ||'】采购数量【'||a.sl||'】',
'CKD', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，库房直接出库至科室【'|| f_getdeptname(a.deptid) ||'】，出库数量【'||a.sl||'】',
'YKD', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，【'|| f_getdeptname(a.deptid) ||'】高值跟台使用数量【'||a.sl||'】',
'LCD', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，出库至科室【'|| f_getdeptname(a.deptid) ||'】，出库数量【'||a.sl||'】',
'DSC', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，定数出库数量【'||a.sl||'】',
'XST', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，销售退数量【'||a.sl||'】',
'THD', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，商品退货数量【'||a.sl||'】',
'SYD', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，商品损益数量【'||a.sl||'】'
) SEQNOMEMO ,b.rulename typename, a.sl, a.BILLNO ,f_getusername(a.opergh) czr
                                       FROM DAT_GOODSJXC A, SYS_GLOBRULE B 
                                       WHERE A.BILLTYPE = SUBSTR(RULEID,6)
                                            and a.kcadd = '1'
                                            
                     
UNION ALL
                     
select a.deptid,a.gdseq,a.rqsj,a.billtype,
DECODE(a.billtype,
'LTD', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，科室【'|| f_getdeptname(a.deptid) ||'】退货至库房，退货数量【'||a.sl||'】',

'XSD', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，销售数量【'||a.sl||'】',
'XSG', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，高值商品使用数量【'||a.sl||'】',

'DSH', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，定数回收量【'||a.sl||'】',
'SYD', to_char(a.rqsj, 'yyyy-MM-dd')||'，【'||b.rulename||'】，商品损益数量【'||a.sl||'】'
) SEQNOMEMO ,b.rulename typename, a.sl, a.BILLNO ,f_getusername(a.opergh) czr
                                       FROM DAT_GOODSJXC A, SYS_GLOBRULE B 
                                       WHERE A.BILLTYPE = SUBSTR(RULEID,6)
                                            and a.kcadd = '-1'
                                              
									   
) where deptid in (SELECT CODE FROM SYS_DEPT WHERE TYPE IN ('3', '4')) 
AND DEPTID = '{3}'
AND GDSEQ = '{0}' 
                                             AND RQSJ > (TO_DATE('{1}', 'YYYYMMDD'))
                                             AND RQSJ <= (TO_DATE('{2}', 'YYYYMMDD'))
                                       ", gdseq, rq1, rq2, deptid);
            string strWhere = "";
            if (!PubFunc.StrIsEmpty(docBILLTYPE.SelectedValue))
            {
                strWhere += string.Format(" AND billtype = '{0}'", docBILLTYPE.SelectedValue);
            }
            strWhere += " ORDER BY RQSJ DESC";

            strSql += strWhere;
            
            int total = 0;
            GridGoods.DataSource = PubFunc.DbGetPage(GridGoods.PageIndex, GridGoods.PageSize, strSql, ref total);
            GridGoods.RecordCount = total;
            GridGoods.DataBind();
            TabStrip1.ActiveTabIndex = 2;
        }

        protected void GridDeptList_RowDoubleClick(object sender, GridRowClickEventArgs e)
        {
            string strDEPTID = GridDeptList.Rows[e.RowIndex].DataKeys[0].ToString();
            ddlListDEPTID.SelectedValue = strDEPTID;
            dpkTime1.SelectedDate = dpkBEGRQ.SelectedDate;
            dpkTime2.SelectedDate = dpkENDRQ.SelectedDate;
            TabStrip1.ActiveTabIndex = 1;
            DataSearchList();
        }

        protected void GridDeptList_PageIndexChange(object sender, GridPageEventArgs e)
        {
            GridDeptList.PageIndex = e.NewPageIndex;
            DataSearch();
        }
        private string GetSearchListSql(string StartTime, string EndTime)
        {
            string strSql = @"SELECT A.*, B.GDNAME, B.GDSPEC, f_getunitname( B.UNIT) UNIT
FROM  (SELECT TB.DEPTID,
       TB.GDSEQ,
       NVL(QCKCSL, 0) QCKCSL,
       NVL(QCKCHSJE, 0) QCKCHSJE,
       NVL(SLKCSL, 0) SLKCSL,
       NVL(SLHSJE, 0) SLHSJE,
       NVL(XHKCSL, 0) XHKCSL,
       NVL(XHHSJE, 0) XHHSJE,
       NVL(PYKCSL, 0) PYKCSL,
       NVL(PYHSJE, 0) PYHSJE
  FROM (SELECT GDSEQ,
               DEPTID,
               SUM(DECODE(TO_CHAR(RQ, 'YYYYMMDD'),
                          TO_CHAR(TO_DATE('{0}', 'YYYYMMDD') - 1,
                                  'YYYYMMDD'),
                          KCSL,
                          0)) QCKCSL,
               SUM(DECODE(TO_CHAR(RQ, 'YYYYMMDD'),
                          TO_CHAR(TO_DATE('{0}', 'YYYYMMDD') - 1,
                                  'YYYYMMDD'),
                          KCHSJE,
                          0)) QCKCHSJE
          FROM (SELECT GDSEQ, DEPTID, KCSL, KCHSJE, RQ
                  FROM DAT_STOCKDAY
                UNION ALL
                SELECT GDSEQ, DEPTID, KCSL, KCHSJE, TRUNC(SYSDATE)
                  FROM DAT_GOODSSTOCK) T
         WHERE T.RQ = (TO_DATE('{0}', 'YYYYMMDD') - 1)
         GROUP BY GDSEQ, DEPTID) TA,

       (SELECT gdseq,
               DEPTID,
               SUM(DECODE(A.BILLTYPE, 'SYD', SL, 0)) PYKCSL,--盘盈出库
               SUM(DECODE(A.BILLTYPE, 'SYD', HSJE, 0)) PYHSJE,--盘盈出库
               SUM(DECODE(A.KCADD, '1', DECODE(INSTR('DSC,LCD,CKD', A.BILLTYPE), 0, SL, 0), 0)) SLKCSL,
               SUM(DECODE(A.KCADD, '-1', DECODE(INSTR('LTD,DST', A.BILLTYPE), 0, SL, 0), 0)) STKCSL,
               SUM(DECODE(A.KCADD, '1', DECODE(INSTR('DSC,LCD,CKD', A.BILLTYPE), 0, HSJE, 0), 0)) SLHSJE,
               SUM(DECODE(A.KCADD, '-1', DECODE(INSTR('LTD,DST', A.BILLTYPE), 0, HSJE, 0), 0)) STHSJE,
         
               
               SUM(DECODE(A.KCADD, '-1', DECODE(INSTR('XSD,XSG,DSH', A.BILLTYPE), 0, SL, 0), 0)) XHKCSL,
               SUM(DECODE(A.KCADD, '1', DECODE(INSTR('XST', A.BILLTYPE), 0, SL, 0), 0)) XTKCSL,
               SUM(DECODE(A.KCADD, '-1', DECODE(INSTR('XSD,XSG,DSH', A.BILLTYPE), 0, HSJE, 0), 0)) XHHSJE,
               SUM(DECODE(A.KCADD, '1', DECODE(INSTR('XST', A.BILLTYPE), 0, HSJE, 0), 0)) XTHSJE
               
          FROM DAT_GOODSJXC A, SYS_DEPT B
         WHERE A.RQSJ > (TO_DATE('{0}', 'YYYYMMDD'))
           AND A.RQSJ <= (TO_DATE('{1}', 'YYYYMMDD'))
           AND A.DEPTID = B.CODE
           AND B.TYPE in ('3', '4')
         GROUP BY gdseq,DEPTID) TB,
         (SELECT GDSEQ,
               DEPTID,
               SUM(DECODE(TO_CHAR(RQ, 'YYYYMMDD'),
                          TO_CHAR(TO_DATE('{1}', 'YYYYMMDD'),
                                  'YYYYMMDD'),
                          KCSL,
                          0)) JCKCSL,
               SUM(DECODE(TO_CHAR(RQ, 'YYYYMMDD'),
                          TO_CHAR(TO_DATE('{1}', 'YYYYMMDD'),
                                  'YYYYMMDD'),
                          KCHSJE,
                          0)) JCKCHSJE
          FROM (SELECT GDSEQ, DEPTID, KCSL, KCHSJE, RQ
                  FROM DAT_STOCKDAY
                UNION ALL
                SELECT GDSEQ, DEPTID, KCSL, KCHSJE, TRUNC(SYSDATE)
                  FROM DAT_GOODSSTOCK) T
         WHERE T.RQ = (TO_DATE('{1}', 'YYYYMMDD'))
         GROUP BY GDSEQ, DEPTID) TC
 WHERE TA.DEPTID(+) = TB.DEPTID
   AND TC.GDSEQ(+) = TB.GDSEQ
   AND TC.DEPTID(+) = TB.DEPTID";
            string strWhere = " ";

            strWhere += string.Format(@" AND TB.DEPTID in( select code FROM SYS_DEPT where F_CHK_DATARANGE(CODE, '{0}') = 'Y' )
--GROUP BY TB.GDSEQ, TB.DEPTID
) A, DOC_GOODS B
WHERE A.GDSEQ = B.GDSEQ(+)", UserAction.UserID);

            if (!string.IsNullOrWhiteSpace(ddlListDEPTID.SelectedValue))
            {
                strWhere += string.Format(" AND A.DEPTID = '{0}'", ddlListDEPTID.SelectedValue);
            }
            if (!string.IsNullOrWhiteSpace(trbListGoods.Text))
            {
                strWhere += string.Format(" AND (B.GDSEQ LIKE '%{0}%' OR B.GDNAME LIKE '%{0}%' OR B.GDSPEC LIKE '%{0}%' OR B.HISCODE LIKE '%{0}%' OR B.HISNAME LIKE '%{0}%')", trbListGoods.Text);
            }
            if (strWhere != " ") strSql = strSql + strWhere;

            strSql = string.Format(strSql, StartTime, EndTime, StartTime);
            strSql += string.Format(" ORDER BY {0} {1}", GridList.SortField, GridList.SortDirection);
            return strSql;
        }
        private void DataSearchList()
        {

            //if (RQXZ.Text.Trim() == "" || RQXZ.Text.Length != 7)
            //{
            //    Alert.Show("请选择有效时间！");
            //    return;
            //}

            //DateTime time = DateTime.Parse(RQXZ.Text + "-01");
            int total = 0;
            //DataTable dtData = PubFunc.DbGetPage(GridList.PageIndex, GridList.PageSize, GetSearchListSql(Convert.ToDateTime(dpkTime1.SelectedDate).ToString("yyyyMMdd"), Convert.ToDateTime(dpkTime2.SelectedDate).ToString("yyyyMMdd")), ref total);
            System.Text.StringBuilder sbSql = new System.Text.StringBuilder();
            sbSql = searSql(ddlDEPTID.SelectedValue, string.Format("{0:yyyy-MM-dd}", dpkBEGRQ.SelectedDate), string.Format("{0:yyyy-MM-dd}", dpkENDRQ.SelectedDate));

            DataTable dtData = PubFunc.DbGetPage(GridList.PageIndex, GridList.PageSize, sbSql.ToString(), ref total);
            GridList.RecordCount = total;
            GridList.DataSource = dtData;
            GridList.DataBind();
            OutputSummaryData2(dtData);
        }
        protected void trbListGoods_TriggerClick(object sender, EventArgs e)
        {
            DataSearchList();
        }

        protected void btnSearchList_Click(object sender, EventArgs e)
        {
            DataSearchList();
        }

        protected void btnSearchGoods_Click(object sender, EventArgs e)
        {
            if (PubFunc.FormDataCheck(Form3).Length > 1) return;
            dbOpen(docSearch.Text, ddlDEPTIDGD.SelectedValue, string.Format("{0:yyyyMMdd}", dpkRQ1.SelectedDate), string.Format("{0:yyyyMMdd}", dpkRQ2.SelectedDate));
        }
    }
}