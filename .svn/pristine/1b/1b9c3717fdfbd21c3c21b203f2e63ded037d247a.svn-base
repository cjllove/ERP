//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18444 版自动生成。
// 
#pragma warning disable 1591

namespace SPDProject.EasLogin {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EASLoginSoapBinding", Namespace="http://172.16.9.20:6900/ormrpc/services/EASLogin")]
    public partial class EASLoginProxyService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback loginOperationCompleted;
        
        private System.Threading.SendOrPostCallback login1OperationCompleted;
        
        private System.Threading.SendOrPostCallback login2OperationCompleted;
        
        private System.Threading.SendOrPostCallback logoutOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EASLoginProxyService() {
            this.Url = global::SPDProject.Properties.Settings.Default.SPDProject_EasLogin_EASLoginProxyService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event loginCompletedEventHandler loginCompleted;
        
        /// <remarks/>
        public event login1CompletedEventHandler login1Completed;
        
        /// <remarks/>
        public event login2CompletedEventHandler login2Completed;
        
        /// <remarks/>
        public event logoutCompletedEventHandler logoutCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://login.webservice.bos.kingdee.com", ResponseNamespace="http://172.16.9.20:6900/ormrpc/services/EASLogin")]
        [return: System.Xml.Serialization.SoapElementAttribute("loginReturn")]
        public WSContext login(string userName, string password, string slnName, string dcName, string language, int dbType) {
            object[] results = this.Invoke("login", new object[] {
                        userName,
                        password,
                        slnName,
                        dcName,
                        language,
                        dbType});
            return ((WSContext)(results[0]));
        }
        
        /// <remarks/>
        public void loginAsync(string userName, string password, string slnName, string dcName, string language, int dbType) {
            this.loginAsync(userName, password, slnName, dcName, language, dbType, null);
        }
        
        /// <remarks/>
        public void loginAsync(string userName, string password, string slnName, string dcName, string language, int dbType, object userState) {
            if ((this.loginOperationCompleted == null)) {
                this.loginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginOperationCompleted);
            }
            this.InvokeAsync("login", new object[] {
                        userName,
                        password,
                        slnName,
                        dcName,
                        language,
                        dbType}, this.loginOperationCompleted, userState);
        }
        
        private void OnloginOperationCompleted(object arg) {
            if ((this.loginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginCompleted(this, new loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="login1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://login.webservice.bos.kingdee.com", ResponseNamespace="http://172.16.9.20:6900/ormrpc/services/EASLogin")]
        [return: System.Xml.Serialization.SoapElementAttribute("loginReturn")]
        public WSContext login(string userName, string password, string slnName, string dcName, string language, int dbType, string authPattern) {
            object[] results = this.Invoke("login1", new object[] {
                        userName,
                        password,
                        slnName,
                        dcName,
                        language,
                        dbType,
                        authPattern});
            return ((WSContext)(results[0]));
        }
        
        /// <remarks/>
        public void login1Async(string userName, string password, string slnName, string dcName, string language, int dbType, string authPattern) {
            this.login1Async(userName, password, slnName, dcName, language, dbType, authPattern, null);
        }
        
        /// <remarks/>
        public void login1Async(string userName, string password, string slnName, string dcName, string language, int dbType, string authPattern, object userState) {
            if ((this.login1OperationCompleted == null)) {
                this.login1OperationCompleted = new System.Threading.SendOrPostCallback(this.Onlogin1OperationCompleted);
            }
            this.InvokeAsync("login1", new object[] {
                        userName,
                        password,
                        slnName,
                        dcName,
                        language,
                        dbType,
                        authPattern}, this.login1OperationCompleted, userState);
        }
        
        private void Onlogin1OperationCompleted(object arg) {
            if ((this.login1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.login1Completed(this, new login1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="login2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://login.webservice.bos.kingdee.com", ResponseNamespace="http://172.16.9.20:6900/ormrpc/services/EASLogin")]
        [return: System.Xml.Serialization.SoapElementAttribute("loginReturn")]
        public WSContext login(string userName, string password, string slnName, string dcName, string language, int dbType, string authPattern, int isEncodePwd) {
            object[] results = this.Invoke("login2", new object[] {
                        userName,
                        password,
                        slnName,
                        dcName,
                        language,
                        dbType,
                        authPattern,
                        isEncodePwd});
            return ((WSContext)(results[0]));
        }
        
        /// <remarks/>
        public void login2Async(string userName, string password, string slnName, string dcName, string language, int dbType, string authPattern, int isEncodePwd) {
            this.login2Async(userName, password, slnName, dcName, language, dbType, authPattern, isEncodePwd, null);
        }
        
        /// <remarks/>
        public void login2Async(string userName, string password, string slnName, string dcName, string language, int dbType, string authPattern, int isEncodePwd, object userState) {
            if ((this.login2OperationCompleted == null)) {
                this.login2OperationCompleted = new System.Threading.SendOrPostCallback(this.Onlogin2OperationCompleted);
            }
            this.InvokeAsync("login2", new object[] {
                        userName,
                        password,
                        slnName,
                        dcName,
                        language,
                        dbType,
                        authPattern,
                        isEncodePwd}, this.login2OperationCompleted, userState);
        }
        
        private void Onlogin2OperationCompleted(object arg) {
            if ((this.login2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.login2Completed(this, new login2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://login.webservice.bos.kingdee.com", ResponseNamespace="http://172.16.9.20:6900/ormrpc/services/EASLogin")]
        [return: System.Xml.Serialization.SoapElementAttribute("logoutReturn")]
        public bool logout(string userName, string slnName, string dcName, string language) {
            object[] results = this.Invoke("logout", new object[] {
                        userName,
                        slnName,
                        dcName,
                        language});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void logoutAsync(string userName, string slnName, string dcName, string language) {
            this.logoutAsync(userName, slnName, dcName, language, null);
        }
        
        /// <remarks/>
        public void logoutAsync(string userName, string slnName, string dcName, string language, object userState) {
            if ((this.logoutOperationCompleted == null)) {
                this.logoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogoutOperationCompleted);
            }
            this.InvokeAsync("logout", new object[] {
                        userName,
                        slnName,
                        dcName,
                        language}, this.logoutOperationCompleted, userState);
        }
        
        private void OnlogoutOperationCompleted(object arg) {
            if ((this.logoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logoutCompleted(this, new logoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:client")]
    public partial class WSContext {
        
        private int dbTypeField;
        
        private string dcNameField;
        
        private string passwordField;
        
        private string sessionIdField;
        
        private string slnNameField;
        
        private string userNameField;
        
        /// <remarks/>
        public int dbType {
            get {
                return this.dbTypeField;
            }
            set {
                this.dbTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dcName {
            get {
                return this.dcNameField;
            }
            set {
                this.dcNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string sessionId {
            get {
                return this.sessionIdField;
            }
            set {
                this.sessionIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string slnName {
            get {
                return this.slnNameField;
            }
            set {
                this.slnNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void loginCompletedEventHandler(object sender, loginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WSContext Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WSContext)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void login1CompletedEventHandler(object sender, login1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class login1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal login1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WSContext Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WSContext)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void login2CompletedEventHandler(object sender, login2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class login2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal login2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WSContext Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WSContext)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void logoutCompletedEventHandler(object sender, logoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591