using XTBase;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using FineUIPro;
using System.Data;
using Newtonsoft.Json.Linq;

namespace SPDProject.SpdQuery
{
    public partial class GoodsInvoicingSum : PageBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                // 在页面第一次加载时 
                BindDDL();
            }
        }
        private void BindDDL()
        {
            dpkDATE1.SelectedDate = DateTime.Now;
            dpkDATE2.SelectedDate = DateTime.Now;
            DepartmentBind.BindDDL("DDL_SYS_DEPTRANGE", UserAction.UserID, ddlDEPTID);
            PubFunc.DdlDataGet(ddlSUPID, "DDL_DOC_SUPPLIERNULL");
        }

        private void OutputSummaryData(DataTable source)
        {
            float donateTotal = 0.0f;
            float feeTotal = 0.0f;
            foreach (DataRow row in source.Rows)
            {
                donateTotal += Convert.ToInt32(row["SL"]);
                feeTotal += Convert.ToInt32(row["HSJE"]);
            }

            JObject summary = new JObject();
            summary.Add("GDNAME", "本页合计");
            summary.Add("SL", feeTotal.ToString("F2"));
            summary.Add("HSJE", donateTotal.ToString("F2"));

            GridGoods.SummaryData = summary;
        }

        private string GetSql()
        {
            string strSql = @"SELECT A.DEPTID,
                                                   F_GETDEPTNAME(A.DEPTID) DEPTNAME,
                                                   A.GDSEQ,
                                                   A.CATID,
                                                   F_GETCATNAME(A.CATID) CATNAME,
                                                   B.GDNAME,
                                                   B.GDSPEC,
                                                   A.SUPID,
                                                   F_GETSUPNAME(A.SUPID) SUPNAME,
                                                   A.PZWH,
                                                   ROUND(SUM(A.SL), 4) SL,
                                                   ROUND(SUM(A.HSJE), 4) HSJE,
                                                   DECODE(B.ISGZ, 'Y', '是', '否') ISGZ
                                              FROM DAT_GOODSJXC A, DOC_GOODS B
                                             WHERE A.GDSEQ = B.GDSEQ ";
            string strWhere = "";
            strWhere += " AND A.RQSJ>=TO_DATE('" + dpkDATE1.Text + "','YYYY-MM-DD') AND  A.RQSJ< TO_DATE('" + dpkDATE2.Text + "','YYYY-MM-DD') +1 ";

            if (!PubFunc.StrIsEmpty(ddlSUPID.SelectedValue)) strWhere += " AND A.SUPID = '" + ddlSUPID.SelectedValue + "'";
            if (!PubFunc.StrIsEmpty(ddlDEPTID.SelectedValue)) strWhere += " AND A.DEPTID = '" + ddlDEPTID.SelectedValue + "'";
            if (!PubFunc.StrIsEmpty(txbGDSEQ.Text)) strWhere += " AND A.GDSEQ = '" + txbGDSEQ.Text + "'";
            if (!PubFunc.StrIsEmpty(ddlISGZ.SelectedValue)) strWhere += " AND B.ISGZ = '" + ddlISGZ.SelectedValue + "'";
            if (!PubFunc.StrIsEmpty(ddlInvoicType.SelectedValue)) strWhere += " AND A.KCADD = '" + ddlInvoicType.SelectedValue + "'";
            strWhere += " GROUP BY A.GDSEQ,A.CATID,A.SUPID,A.PZWH,A.DEPTID,B.GDNAME,B.GDSPEC,ISGZ";
            strWhere += " ORDER BY A.GDSEQ ASC";
            if (strWhere.Trim().Length > 0) strSql = strSql + strWhere;
            return strSql;
        }

        private void DataSearch()
        {
            if (PubFunc.StrIsEmpty(dpkDATE1.SelectedDate.ToString()) || PubFunc.StrIsEmpty(dpkDATE2.SelectedDate.ToString()))
            {
                Alert.Show("输入日期不正确,请检查！");
                return;
            }
            if (dpkDATE1.SelectedDate > dpkDATE2.SelectedDate)
            {
                Alert.Show("开始日期不能大于结束日期！");
                return;
            }

            int total = 0;
            DataTable dtData = PubFunc.DbGetPage(GridGoods.PageIndex, GridGoods.PageSize, GetSql(), ref total);
            GridGoods.RecordCount = total;
            GridGoods.DataSource = dtData;
            GridGoods.DataBind();

            OutputSummaryData(dtData);
        }

        protected void GridGoods_PageIndexChange(object sender, GridPageEventArgs e)
        {
            GridGoods.PageIndex = e.NewPageIndex;
            DataSearch();
        }
        protected void btSearch_Click(object sender, EventArgs e)
        {
            DataSearch();

            DataTable dt = DbHelperOra.Query(GetSql()).Tables[0];
            lblHJSL.Text = decimal.Parse(string.IsNullOrWhiteSpace(dt.Compute("Sum(SL)", "").ToString()) ? "0" : dt.Compute("Sum(SL)", "").ToString()).ToString("F2");
            lblHJJE.Text = decimal.Parse(string.IsNullOrWhiteSpace(dt.Compute("Sum(HSJE)", "").ToString()) ? "0" : dt.Compute("Sum(HSJE)", "").ToString()).ToString("F2");
        }
        protected void btClear_Click(object sender, EventArgs e)
        {
            PubFunc.FormDataClear(FormUser);
            dpkDATE1.SelectedDate = DateTime.Now;
            dpkDATE2.SelectedDate = DateTime.Now;
        }
        protected void btExport_Click(object sender, EventArgs e)
        {
            if (GridGoods.Rows.Count < 1)
            {
                Alert.Show("没有数据,无法导出！");
                return;
            }
            Response.ClearContent();
            Response.AddHeader("content-disposition", "attachment; filename=商品进销存汇总.xls");
            Response.ContentType = "application/excel";
            Response.ContentEncoding = System.Text.Encoding.UTF8;
            Response.Write(PubFunc.GridToHtml(GridGoods));
            Response.End();
            btnExp.Enabled = true;
        }
    }
}