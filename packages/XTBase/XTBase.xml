<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XTBase</name>
    </assembly>
    <members>
        <member name="T:XTBase.BillBase">
            <summary>
            单据基类
            </summary>
        </member>
        <member name="P:XTBase.BillBase.BillType">
            <summary>
            单据类型
            </summary>
        </member>
        <member name="P:XTBase.BillBase.LockControl">
            <summary>
            锁定处理控件
            </summary>
        </member>
        <member name="P:XTBase.BillBase.Grid_Goods">
            <summary>
            物料信息列表
            </summary>
        </member>
        <member name="M:XTBase.BillBase.billLockDoc(System.Boolean)">
            <summary>
            Form表单锁定
            </summary>
            <param name="blLock">是否锁定(锁定-true)</param>
        </member>
        <member name="M:XTBase.BillBase.BillOper(System.String,System.String)">
            <summary>
            操作单据
            </summary>
            <param name="as_billseq"></param>
            <param name="as_oper"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.BillBase.BillOperLog(System.String,System.String)">
            <summary>
            单据日志记录
            </summary>
            <param name="as_billseq">单据编号</param>
            <param name="as_oper">操作指令</param>
        </member>
        <member name="M:XTBase.BillBase.BillSeqGet(System.String)">
            <summary>
            获取单据编号
            </summary>
            <param name="billType">单据类型</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.BillBase.GetGoods(System.String)">
            <summary>
            获取查询页面传递过来的商品信息
            </summary>
            <param name="goods"></param>
            <returns></returns>
        </member>
        <member name="T:XTBase.Business.Report">
            <summary>
            自定义报表基类
            </summary>
        </member>
        <member name="P:XTBase.Business.Report.RepID">
            <summary>
            报表ID
            </summary>
        </member>
        <member name="P:XTBase.Business.Report.RepName">
            <summary>
            报表名称
            </summary>
        </member>
        <member name="P:XTBase.Business.Report.RepSQL">
            <summary>
            报表SQL语句
            </summary>
        </member>
        <member name="P:XTBase.Business.Report.ColKEY">
            <summary>
            主键列，以逗号分开
            </summary>
        </member>
        <member name="P:XTBase.Business.Report.ColSORT">
            <summary>
            排序列
            </summary>
        </member>
        <member name="P:XTBase.Business.Report.ColSUM">
            <summary>
            汇总列，以逗号分开
            </summary>
        </member>
        <member name="P:XTBase.Business.Report.ColNUM">
            <summary>
            总列数
            </summary>
        </member>
        <member name="P:XTBase.Business.Report.CondNUM">
            <summary>
            参数个数
            </summary>
        </member>
        <member name="P:XTBase.Business.Report.PageSize">
            <summary>
            每页行数(0不分页)
            </summary>
        </member>
        <member name="F:XTBase.Business.Report.RepCol">
            <summary>
            报表列明细
            </summary>
        </member>
        <member name="F:XTBase.Business.Report.RepCond">
            <summary>
            报表抬头明细
            </summary>
        </member>
        <member name="F:XTBase.Business.Report.dsRepCol">
            <summary>
            报表列明细数据
            </summary>
        </member>
        <member name="F:XTBase.Business.Report.dsRepCond">
            <summary>
            报表抬头明细数据
            </summary>
        </member>
        <member name="M:XTBase.Business.Report.#ctor(System.String)">
            <summary>
            根据报表ID初始化报表信息
            </summary>
            <param name="strReportID">报表ID</param>
        </member>
        <member name="M:XTBase.Business.Report.GetCol(System.String,System.String)">
            <summary>
            获取报表列数据
            </summary>
            <param name="strReportID">报表ID</param>
            <param name="strRepType">报表类型</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Business.Report.DataSetToList(System.Data.DataSet)">
            <summary>
            将DataSet转换为List类型
            </summary>
            <param name="dsData"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Business.Report.ReportDel(System.String)">
            <summary>
            删除报表信息
            </summary>
            <param name="RepID">报表ID</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Business.Report.ReportAdd(System.String)">
            <summary>
            添加报表信息
            </summary>
            <param name="as_mode"></param>
            <returns></returns>
        </member>
        <member name="T:XTBase.Business.ReportCol">
            <summary>
            报表列字段信息
            </summary>
        </member>
        <member name="P:XTBase.Business.ReportCol.SEQNO">
            <summary>
            报表编码(VARCHAR2(20))
            </summary>
        </member>
        <member name="P:XTBase.Business.ReportCol.ROWNO">
            <summary>
            行号(NUMBER)
            </summary>       
        </member>
        <member name="P:XTBase.Business.ReportCol.COLTYPE">
            <summary>
            类别(VARCHAR2(20) :COL/COND /SORT/SUM)
            </summary>              
        </member>
        <member name="P:XTBase.Business.ReportCol.COLID">
            <summary>
            字段名(VARCHAR2(40))
            </summary>  
        </member>
        <member name="P:XTBase.Business.ReportCol.COLNAME">
            <summary>
            列中文名 (VARCHAR2(40))
            </summary>                  
        </member>
        <member name="P:XTBase.Business.ReportCol.COLWIDTH">
            <summary>
            列宽(NUMBER)
            </summary>           
        </member>
        <member name="P:XTBase.Business.ReportCol.DATATYPE">
            <summary>
            数据类型(VARCHAR2(20) )
            </summary>               
        </member>
        <member name="P:XTBase.Business.ReportCol.DISPTYPE">
            <summary>
            显示类型(VARCHAR2(20) )
            </summary>            
        </member>
        <member name="P:XTBase.Business.ReportCol.FORMAT">
            <summary>
            显示格式(VARCHAR2(20))
            </summary>               
        </member>
        <member name="P:XTBase.Business.ReportCol.TEXTALIGN">
            <summary>
            文本对齐(VARCHAR2(20))
            </summary>                 
        </member>
        <member name="P:XTBase.Business.ReportCol.DDLSQL">
            <summary>
            下拉列表(VARCHAR2(20))
            </summary>               
        </member>
        <member name="P:XTBase.Business.ReportCol.ENABLESUMMARY">
            <summary>
            是否有汇总行(CHAR(1))
            </summary>
        </member>
        <member name="P:XTBase.Business.ReportCol.STR1">
            <summary>
            备用(VARCHAR2(20))
            </summary>             
        </member>
        <member name="P:XTBase.Business.ReportCol.STR2">
            <summary>
            备用(VARCHAR2(20))
            </summary>                 
        </member>
        <member name="P:XTBase.Business.ReportCol.STR3">
            <summary>
            备用(VARCHAR2(20))
            </summary>                   
        </member>
        <member name="T:XTBase.EffentNextType">
            <summary>
            SQL语句执行条件
            </summary>
        </member>
        <member name="F:XTBase.EffentNextType.None">
            <summary>
            对其他语句无任何影响 
            </summary>
        </member>
        <member name="F:XTBase.EffentNextType.WhenHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果存在则继续执行，不存在回滚事务
            </summary>
        </member>
        <member name="F:XTBase.EffentNextType.WhenNoHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="F:XTBase.EffentNextType.ExcuteEffectRows">
            <summary>
            当前语句影响到的行数必须大于0，否则回滚事务
            </summary>
        </member>
        <member name="F:XTBase.EffentNextType.SolicitationEvent">
            <summary>
            引发事件-当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="T:XTBase.CommandInfo">
            <summary>
            Command中的SQL语句信息，需要结合DbHelperOra一起使用
            </summary>
        </member>
        <member name="F:XTBase.CommandInfo.CommandText">
            <summary>
            SQL语句/存储过程名
            </summary>
        </member>
        <member name="F:XTBase.CommandInfo.Parameters">
            <summary>
            参数数组
            </summary>
        </member>
        <member name="F:XTBase.CommandInfo.EffentNextType">
            <summary>
            SQL语句执行条件
            </summary>
        </member>
        <member name="F:XTBase.CommandInfo.CommandType">
            <summary>
            指定如何解释命令字符串
            </summary>
        </member>
        <member name="M:XTBase.CommandInfo.#ctor(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            生成Command语句信息
            </summary>
            <param name="sqlText">执行的SQL语句</param>
            <param name="para">SQL语句中的参数信息</param>
        </member>
        <member name="M:XTBase.CommandInfo.#ctor(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[],XTBase.EffentNextType)">
            <summary>
            生成Command语句信息
            </summary>
            <param name="sqlText">执行的SQL语句</param>
            <param name="para">SQL语句中的参数信息</param>
            <param name="type">SQL语句执行条件</param>
        </member>
        <member name="M:XTBase.CommandInfo.#ctor(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[],System.Data.CommandType)">
            <summary>
            生成Command语句信息
            </summary>
            <param name="sqlText">执行的SQL语句/存储过程名</param>
            <param name="para">SQL语句中的参数信息</param>
            <param name="cmdType">指定如何解释命令字符串（SQL语句/存储过程）</param>
        </member>
        <member name="T:XTBase.DbHelperOra">
            <summary>
            数据访问基础类(基于Oracle)
            </summary>
        </member>
        <member name="M:XTBase.DbHelperOra.ConnString">
            <summary>
            默认配置连接字符串名：OracleConnString
            </summary>
        </member>
        <member name="F:XTBase.DbHelperOra.connectionString">
            <summary>
            数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.	
            </summary>
        </member>
        <member name="M:XTBase.DbHelperOra.ParameterNull(Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            处理空参数值（所有的空值均被赋值为：DBNull.Value）
            </summary>
            <param name="parameters">参数数组</param>
        </member>
        <member name="M:XTBase.DbHelperOra.GetMaxID(System.String,System.String,System.String)">
            <summary>
            获取最大值
            </summary>
            <param name="FieldName">字段名</param>
            <param name="TableName">表名</param>
            <param name="where">执行条件</param>
            <returns>当前表中的最大值+1</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.Exists(System.String)">
            <summary>
            数据库中是否存在该条记录
            </summary>
            <param name="strSql">需要进行判断的SQL语句</param>
            <returns>true：存在；false：不存在</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.Exists(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            数据库中是否存在该条记录
            </summary>
            <param name="strSql">需要进行判断的SQL语句</param>
            <param name="cmdParms">数据库参数</param>
            <returns>true：存在；false：不存在</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteSql(System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteSqlTran(System.Collections.ArrayList)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteSqlTran(System.Collections.Generic.List{XTBase.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="cmdList">多条SQL语句</param>		
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.GetArrayList(System.String)">
            <summary>
            执行查询语句，返回OracleDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>OracleDataReader</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteReader(System.String)">
            <summary>
            执行查询语句，返回OracleDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>OracleDataReader</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.QueryForTable(System.String)">
            <summary>
            执行SQL语句，返回数据库表结构(包括主键信息)
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.Query(System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteSql(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="cmdParms">数据库参数数组</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>
        </member>
        <member name="M:XTBase.DbHelperOra.GetSingle(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <param name="cmdParms">SQLString参数数组</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteReader(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            执行查询语句，返回OracleDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="SQLString">查询语句</param>
            <param name="cmdParms">数据库参数数组</param>
            <returns>OracleDataReader</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.Query(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <param name="cmdParms">数据库参数数组</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.RunProcedure(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            执行存储过程，返回受影响的条数
            </summary>
            <param name="storedProcName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.DbHelperOra.ExecuteDataSet(System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            执行存储过程，返回DataSet
            </summary>
            <param name="storedProcName">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.DbHelperOra.BuildQueryCommand(Oracle.ManagedDataAccess.Client.OracleConnection,System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            构建 OracleCommand 对象(用来返回一个结果集，而不是一个整数值)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>OracleCommand</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.BuildIntCommand(Oracle.ManagedDataAccess.Client.OracleConnection,System.String,Oracle.ManagedDataAccess.Client.OracleParameter[])">
            <summary>
            创建 OracleCommand 对象实例(用来返回一个整数值)	
            </summary>
            <param name="connection">数据库连接</param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>OracleCommand 对象实例</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.SQL_GetData(System.Collections.ArrayList)">
            <summary>
            执行指定SQL语句，返回查询结果的JSON字符串
            </summary>
            <param name="arlStr">web.config中要定位的键名</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.SQL_ExecSQL(System.Collections.ArrayList)">
            <summary>
            执行通用SQL
            </summary>
            <param name="arlStr">web.config中要定位的键名</param>
            <returns>OK:执行成功；ERR：错误信息</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.SQL_ExecProc(System.Collections.ArrayList)">
            <summary>
            执行指定SQL语句，返回查询结果的JSON字符串
            </summary>
            <param name="arlStr">web.config中要定位的键名</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.SQLPARA(System.Collections.ArrayList)">
            <summary>
            得到参数定义的SQL，并用参数替换
            </summary>
            <param name="arlStr">web.config中要定位的键名</param>
            <returns>用参数替换后的SQL语句</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.DataTable2Json(System.Data.DataTable)">
            <summary>
            将DataTable转换成Json字符串
            </summary>
            <param name="dt">需要转换的DataTable</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:XTBase.DbHelperOra.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            将LIST转换成JSON
            </summary>
            <typeparam name="T">LIST类型</typeparam>
            <param name="list">需要转换的LIST列表</param>
            <param name="JsonName">生成JSON类型名称</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="P:XTBase.ICustomTree.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XTBase.ICustomTree.TreeLevel">
            <summary>
            菜单在树形结构中的层级（从0开始）
            </summary>
        </member>
        <member name="P:XTBase.ICustomTree.Enabled">
            <summary>
            是否可用（默认true）,在模拟树的下拉列表中使用
            </summary>
        </member>
        <member name="P:XTBase.ICustomTree.IsTreeLeaf">
            <summary>
            是否叶子节点（默认true）
            </summary>
        </member>
        <member name="T:XTBase.MyTable">
            <summary>
            数据库操作类
            </summary>
        </member>
        <member name="P:XTBase.MyTable.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="P:XTBase.MyTable.strSelect">
            <summary>
            查询语句
            </summary>
        </member>
        <member name="P:XTBase.MyTable.strDelete">
            <summary>
            删除语句
            </summary>
        </member>
        <member name="P:XTBase.MyTable.strColList">
            <summary>
            表字段名(多个以,分隔)
            </summary>
        </member>
        <member name="P:XTBase.MyTable.strColKey">
            <summary>
            主键((多个以,分隔)
            </summary>
        </member>
        <member name="P:XTBase.MyTable.intColNum">
            <summary>
            字段数量
            </summary>
        </member>
        <member name="F:XTBase.MyTable.Col">
            <summary>
            以数组形式存放的一行列值
            </summary>
        </member>
        <member name="F:XTBase.MyTable.ColRow">
            <summary>
            以Hashtable存放的一行列值
            </summary>
        </member>
        <member name="M:XTBase.MyTable.SqlWhere">
            <summary>
            根据主键生成SQL的查询条件
            </summary>
        </member>
        <member name="M:XTBase.MyTable.Init(System.String)">
            <summary>
            根据表名进行初始化操作
            </summary>
            <param name="strTable">进行初始化操作的表名</param>
        </member>
        <member name="M:XTBase.MyTable.#ctor(System.String)">
            <summary>
            根据表名生成该表的增删改查SQL
            </summary>
            <param name="strTable">表名</param>
        </member>
        <member name="M:XTBase.MyTable.#ctor(System.String,System.String)">
            <summary>
            根据表名生成该表的增删改查SQL,并指定主键
            </summary>
            <param name="strTable">表名</param>
            <param name="strKey">主键</param>
        </member>
        <member name="M:XTBase.MyTable.SqlGetWhere(System.String,System.String)">
            <summary>
            为SQL语句添加执行条件
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="strWhere">执行条件(即SQL语句中WHERE后面的条件语句)</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.MyTable.Select(System.String)">
            <summary>
            按条件执行查询语句
            </summary>
            <param name="strWhere">执行条件(即SQL语句中WHERE后面的条件语句)</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:XTBase.MyTable.Insert">
            <summary>
            生成INSERT语句
            </summary>
            <returns>根据初始化信息生成的INSERT语句</returns>
            <remarks>
                该方法只是获取拼装好的SQL语句，并未发送数据库执行.
            </remarks>
            <example>
                获取INSERT语句:
                <code>
                    MyTable mt=new MyTable("Doc_Goods");
                    private CommandInfo insert=mt.Insert();
                </code>
            </example>
        </member>
        <member name="M:XTBase.MyTable.Update(System.String)">
            <summary>
            生成UPDATE语句
            </summary>
            <param name="strWhere">更新条件(为空则根据数据库主键进行更新，不需要带where字段)</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.MyTable.Delete(System.String)">
            <summary>
            生成DELETE语句
            </summary>
            <param name="strWhere">删除条件</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.MyTable.Exists(System.String)">
            <summary>
            判断数据中是否存在某条记录
            </summary>
            <param name="VI_strWhere">执行条件</param>
            <returns>true：存在；false：不存在</returns>
        </member>
        <member name="M:XTBase.MyTable.InsertCommand">
            <summary>
            生成的INSERT语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTBase.MyTable.InsertExec">
            <summary>
            执行INSERT语句
            </summary>
        </member>
        <member name="M:XTBase.MyTable.UpdateExec(System.String)">
            <summary>
            执行UPDATE语句
            </summary>
            <param name="strWhere">更新条件</param>
        </member>
        <member name="M:XTBase.MyTable.DeleteCommand(System.String)">
            <summary>
            生成的DELETE语句
            </summary>
            <param name="strWhere">删除条件</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.MyTable.DeleteExec(System.String)">
            <summary>
            执行DELETE语句
            </summary>
            <param name="strWhere">删除条件</param>
        </member>
        <member name="M:XTBase.MyTable.ColClear">
            <summary>
            清空列字段
            </summary>
        </member>
        <member name="M:XTBase.MyTable.GetOracleType(System.String)">
            <summary>
            将DataColumn.DataType类型字符串表达形式应映射到OracleType类型
            </summary>
            <param name="dbType">DataColumn.DataType类型字符串</param>
            <returns></returns>
        </member>
        <member name="T:XTBase.PageBase">
            <summary>
            页面基类
            </summary>
        </member>
        <member name="F:XTBase.PageBase.UserAction">
            <summary>
            登录用户信息
            </summary>
        </member>
        <member name="M:XTBase.PageBase.GetQueryValue(System.String)">
            <summary>
            获取查询字符串中的参数值
            </summary>
        </member>
        <member name="M:XTBase.PageBase.GetQueryIntValue(System.String)">
            <summary>
            获取查询字符串中的参数值
            </summary>
        </member>
        <member name="M:XTBase.PageBase.GetSelectedDataKeyIDs(FineUIPro.Grid)">
            <summary>
            获取表格选中项DataKeys的第一个值，并转化为整型列表
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.GetIdentityUser">
            <summary>
            当前登录用户的用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.GetIdentityName">
            <summary>
            当前登录用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.CheckPowerView">
            <summary>
            检查当前用户是否拥有当前页面的浏览权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.CheckPower(System.String)">
            <summary>
            检查当前用户是否拥有某个权限
            </summary>
            <param name="powerType"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.GetRolePowerNames">
            <summary>
            获取当前登录用户拥有的全部权限列表
            </summary>
            <param name="roleIDs"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.ResolveDeleteButtonForGrid(FineUIPro.Button,FineUIPro.Grid)">
            <summary>
            为删除Grid中选中项的按钮添加提示信息
            </summary>
            <param name="btn"></param>
            <param name="grid"></param>
        </member>
        <member name="M:XTBase.PageBase.GetSelectedIDsFromHiddenField(FineUIPro.HiddenField)">
            <summary>
            从隐藏字段中获取选择的全部ID列表
            </summary>
            <param name="hfSelectedIDS"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.SyncSelectedRowIndexArrayToHiddenField(FineUIPro.HiddenField,FineUIPro.Grid)">
            <summary>
            跨页保持选中项 - 将表格当前页面选中行对应的数据同步到隐藏字段中
            </summary>
            <param name="hfSelectedIDS"></param>
            <param name="grid"></param>
        </member>
        <member name="M:XTBase.PageBase.UpdateSelectedRowIndexArray(FineUIPro.HiddenField,FineUIPro.Grid)">
            <summary>
            跨页保持选中项 - 根据隐藏字段的数据更新表格当前页面的选中行
            </summary>
            <param name="hfSelectedIDS"></param>
            <param name="grid"></param>
        </member>
        <member name="M:XTBase.PageBase.GetRequestEventArgument">
            <summary>
            获取回发的参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.GetDataTable(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            获取分页后的数据
            </summary>
            <param name="pageNum">第几页(从0开始)</param>
            <param name="pageSize">每页多少条</param>
            <param name="sbSql">查询语句</param>
            <param name="totalNum">总条目数</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.GetDataTable(System.Int32,System.Int32,System.Text.StringBuilder,System.Int32@)">
            <summary>
            获取分页后的数据
            </summary>
            <param name="pageNum">第几页(从0开始)</param>
            <param name="pageSize">每页多少条</param>
            <param name="sbSql">查询语句</param>
            <param name="totalNum">总条目数</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PageBase.OperLog(System.String,System.String)">
            <summary>
            单据日志记录
            </summary>
            <param name="TypeID"></param>
            <param name="Content"></param>
        </member>
        <member name="T:XTBase.PubFunc">
            <summary>
            常用公共处理函数
            </summary>
        </member>
        <member name="M:XTBase.PubFunc.StrIsEmpty(System.String)">
            <summary>
            判断值是否为空
            </summary>
            <param name="value">要进行判断的值</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.StrSysRq">
            <summary>
            获取系统日期(日期格式：yyyy-MM-dd)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.isNumeric(System.String)">
            <summary>
            是否为数字
            </summary>
            <param name="strValue">要判断的值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:XTBase.PubFunc.isDateTwoValid(System.DateTime,System.DateTime)">
            <summary>
            检查两个日期数据的合法性
            </summary>
            <param name="dt1">开始日期</param>
            <param name="dt2">结束日期</param>
            <returns>""或错误信息</returns>
        </member>
        <member name="M:XTBase.PubFunc.DbGetPara(System.String)">
            <summary>
            根据参数名称获取参数值(SYS_PARA)
            </summary>
            <param name="as_code">参数名称</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XTBase.PubFunc.DbGetRule(System.String,System.String)">
            <summary>
            得到系统规则的编码(主要是单据编码信息)
            </summary>
            <param name="as_rule">编码规则</param>
            <param name="as_commit">是否提交（Y:提交；N：不提交）</param>
            <returns></returns>
            <remarks>
                如果没有找到用户则返回空字符串.<br/>
                <paramref name="as_rule"/> 参数对应于SYS_GLOBRULE的RULEID字段值.
            </remarks>
            <example>
                返回入库单单号:
                <code>
                    private string bill = PubFunc.DbGetRule("BILL_RKD","N");
                </code>
                返回的编号有可能为空字符串,使用时要先判断:<br/>
                <c>if(!string.IsNullOrWhiteSpace(bill)){...}</c>
            </example>
            <exception cref="T:System.ApplicationException">
                如果存储过程P_GETRULE执行错误则抛出此异常
            </exception>
        </member>
        <member name="M:XTBase.PubFunc.DbBillOper(System.String,System.String,System.String,System.String)">
            <summary>
            单据统一处理函数(系统的单据审批、审核等都需要调用该函数)
            </summary>
            <param name="as_billseq">单据编号</param>
            <param name="as_billtype">单据类型</param>
            <param name="as_loggh">操作人</param>
            <param name="as_oper">具体的操作动作(AUDIT:审核确定；DECLARE：领用报批/审批等)</param>
            <returns></returns>
            <remarks>
                如果执行成功则返回空字符串，否则返回错误信息.<br/>
            </remarks>
            <example>
                入库单审核操作:
                <code>
                    PubFunc.DbBillOper("RKD1501010001","RKD","yuanp","AUDIT");
                </code>
            </example>
            <exception cref="T:System.ApplicationException">
                如果存储过程P_EXECTASK执行错误则抛出此异常
            </exception>
        </member>
        <member name="M:XTBase.PubFunc.DbGetPage(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            获取分页后的数据
            </summary>
            <param name="pageNum">第几页(从0开始)</param>
            <param name="pageSize">每页多少条</param>
            <param name="strSql">数据源SQL</param>
            <param name="totalRows">总条目数</param>
            <returns>分页后的数据</returns>
            <remarks>
                如果没有找到分页数据则返回的DataTable为空.<br/>
                <paramref name="pageNum"/> 参数为正整数.<br/>
                <paramref name="pageSize"/> 参数为正整数.<br/>
                <paramref name="totalRows"/> 参数为正整数.<br/>
            </remarks>
            <example>
                每页100条数据，取第一页:
                <code>
                    private DataTable dt = PubFunc.DbGetPage(0,100,sql,ref totalRows);
                </code>
                不启用分页功能:
                <code>
                    private DataTable dt = PubFunc.DbGetPage(0,0,sql,ref totalRows);
                </code>
            </example>
            <exception cref="T:System.ApplicationException">
                如果SQL语句执行错误则抛出此异常
            </exception>
        </member>
        <member name="M:XTBase.PubFunc.GridToHtml(FineUIPro.Grid)">
            <summary>
            将FineUIPro.Grid转换成Html代码
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <returns>转换后的Html代码</returns>
            <remarks>
                如果传入grid为null会报异常，请先判断grid是否有值.<br/>
                <paramref name="grid"/> 参数为FineUIPro.Grid类型.<br/>
            </remarks>
            <example>
                调用方法如下:
                <code>
                    private string html = PubFunc.GridToHtml;
                </code>
                返回的FineUIPro.CheckBox如果选中则为√，非选中为×
            </example>
        </member>
        <member name="M:XTBase.PubFunc.GridDelNullRow(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
            <summary>
            删除FineUIPro.Grid控件的空数据行
            </summary>
            <param name="newDict">新增的数据列</param>
            <param name="colname">需要验证的列ID(多个用，隔开)</param>
        </member>
        <member name="M:XTBase.PubFunc.GridDelNullRow(FineUIPro.Grid,System.String)">
            <summary>
            删除FineUIPro.Grid控件的空数据行
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <param name="colname">需要验证的列ID(多个用，隔开)</param>
        </member>
        <member name="M:XTBase.PubFunc.GridToExcel(FineUIPro.Grid,System.String)">
            <summary>
            将FineUIPro.Grid导出成Excel
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <param name="strFileName">导出文件的名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridCurRow(FineUIPro.Grid)">
            <summary>
            获取FineUIPro.Grid当前选中行的行号
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <returns>当前选中行的行号</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataGet(FineUIPro.Grid,System.Int32)">
            <summary>
            将FineUIPro.Grid控件的行数据转换成Hashtable格式
            </summary>
            <param name="grid">Grid控件</param>
            <param name="row">行号</param>
            <returns>Hashtable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataGet(FineUIPro.Grid,System.Int32,System.String)">
            <summary>
            获取FineUIPro.Grid单元格的值
            </summary>
            <param name="grid">Grid控件</param>
            <param name="row">行号</param>
            <param name="Col">列号</param>
            <returns>单元格的值</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataGet(FineUIPro.GridRow,System.String)">
            <summary>
            获取FineUIPro.Grid单元格的值
            </summary>
            <param name="gr">FineUIPro.GridRow表格行</param>
            <param name="Col">列号</param>
            <returns>单元格的值</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataGet(FineUIPro.GridRow)">
             <summary>
            获取FineUIPro.Grid的行数据
             </summary>
             <param name="gr">FineUIPro.GridRow表格行</param>
             <returns>Hashtable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataGet(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            获取FineUIPro.Grid控件中新增行的数据
            </summary>
            <param name="dic">修改后的行数据(通过FineUIPro.Grid控件的GetNewAddedList()方法获取)</param>
            <returns>Hashtable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataGet(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            FineUIPro.Grid控件新增数据转DataTable
            </summary>
            <param name="listDic">新增数据行</param>
            <returns>DataTable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataSet(FineUIPro.Grid,System.Data.DataTable)">
            <summary>
            FineUIPro.Grid控件绑定数据源
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <param name="Data">要绑定的DataTable数据源</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataSet(FineUIPro.Grid,System.Int32,System.Collections.Hashtable)">
            <summary>
            设置FineUIPro.Grid控件的行数据
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <param name="row">行号</param>
            <param name="Data">要绑定的Hashtable数据源</param>
            <returns>行号</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataSet(FineUIPro.Grid,System.Int32,System.String,System.String)">
            <summary>
            设置FineUIPro.Grid控件的单元格数据
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <param name="row">行号</param>
            <param name="col">列号</param>
            <param name="data">要设置的数据值</param>
            <returns>行号</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridToDataTable(System.Data.DataTable,FineUIPro.Grid)">
            <summary>
            FineUIPro.Grid控件数据转DataTable
            </summary>
            <param name="dt">DataTable数据源</param>
            <param name="grid">FineUIPro.Grid控件</param>
        </member>
        <member name="M:XTBase.PubFunc.GridDataGet(FineUIPro.Grid)">
            <summary>
            FineUIPro.Grid控件的数据转换成DataTable
            </summary>
            <param name="grid">Grid控件</param>
            <returns>DataTable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridDataGet(FineUIPro.Grid,System.Int32[])">
            <summary>
            FineUIPro.Grid控件的选定行数据转换成DataTable
            </summary>
            <param name="grid">Grid控件</param>
            <param name="rowsIndexArray">选定行的索引列表</param>
            <returns>DataTable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.GridRowAdd(FineUIPro.Grid,System.String)">
            <summary>
            FineUIPro.Grid控件增加空白行
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <param name="flag">行位置标识：INIT-追加行；CLEAR-在指定位置追加行</param>
        </member>
        <member name="M:XTBase.PubFunc.GridRowAdd(FineUIPro.Grid,System.Data.DataRow,System.Boolean)">
            <summary>
            FineUIPro.Grid控件增加行数据
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <param name="row">行数据</param>
            <param name="firstRow">是否在指定位置增加行</param>
        </member>
        <member name="M:XTBase.PubFunc.GridRowAdd(FineUIPro.Grid,System.Data.DataTable)">
            <summary>
            FineUIPro.Grid控件增加行数据
            </summary>
            <param name="grid">FineUIPro.Grid控件</param>
            <param name="table">要加载的Grid数据源</param>
        </member>
        <member name="M:XTBase.PubFunc.getAddNewRecordReference(FineUIPro.Grid,Newtonsoft.Json.Linq.JArray,System.Boolean)">
            <summary>
            获取FineUIPro.Grid控件增行脚本
            </summary>
            <param name="grid"></param>
            <param name="ja"></param>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.FormLock(FineUIPro.Form,System.Boolean)">
            <summary>
            锁定FineUIPro.Form表单控件
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <param name="blLock">是否锁定(锁定：true)</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.FormLock(FineUIPro.Form,System.Boolean,System.String)">
            <summary>
            锁定FineUIPro.Form表单控件
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <param name="blLock">是否锁定(锁定：true)</param>
            <param name="strNoLock">不锁定的控件ID(多个用“,”隔开)</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.Form2Lock(FineUIPro.Form,System.Boolean,System.String)">
            <summary>
            锁定FineUIPro.Form表单控件(可以嵌套Form表单)
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <param name="blLock">是否锁定(锁定：true)</param>
            <param name="strNoLock">不锁定的控件ID(多个用“,”隔开)</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.FormDataSet(FineUIPro.Form,System.Data.DataRow)">
            <summary>
            设置FineUIPro.Form表单控件的值
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <param name="dr">DataTable中的一行数据</param>
            <returns>0</returns>
        </member>
        <member name="M:XTBase.PubFunc.Form2DataSet(FineUIPro.Form,System.Data.DataRow)">
            <summary>
            设置FineUIPro.Form表单控件的值(可以嵌套Form表单)
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <param name="dr">DataTable中的一行数据</param>
            <returns>0</returns>
        </member>
        <member name="M:XTBase.PubFunc.FormDataSet(FineUIPro.Form,FineUIPro.GridRow)">
            <summary>
            设置FineUIPro.Form表单控件的值
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <param name="dr">FineUIPro.Grid中的一行数据</param>
            <returns>0</returns>
        </member>
        <member name="M:XTBase.PubFunc.FormDataClear(FineUIPro.Form)">
            <summary>
            清空FineUIPro.Form表单控件的值
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.FormDataCheck(FineUIPro.Form)">
            <summary>
            验证FineUIPro.Form表单控件的值
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO ckbSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <returns>验证信息(验证通过返回空值)</returns>
        </member>
        <member name="M:XTBase.PubFunc.FormDataGet(FineUIPro.Form)">
            <summary>
            获取FineUIPro.Form表单控件的值
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO ckbSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.FormDataGet(FineUIPro.Form,System.String)">
            <summary>
            获取FineUIPro.Form表单中指定项的值
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO ckbSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <param name="strCol">指定项(如:tbxSEQNO则只需输入SEQNO)</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.FormLabelGet(FineUIPro.Form,System.String)">
            <summary>
            获取FineUIPro.Form表单中指定项的Label值
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO ckbSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <param name="strCol">指定项(如:tbxSEQNO则只需输入SEQNO)</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.FormDataHT(FineUIPro.Form)">
            <summary>
            获取FineUIPro.Form表单控件的值
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO ckbSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <returns>Hashtable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.Form2DataHT(FineUIPro.Form)">
            <summary>
            获取FineUIPro.Form表单控件的值(可以嵌套Form表单)
            FineUIPro.Form表单对象的控件名必须为 xxx+COLID，如:tbxSEQNO ddlSEQNO ckbSEQNO
            </summary>
            <param name="form1">FineUIPro.Form表单</param>
            <returns>Hashtable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.GetDataFromContent(System.Web.UI.WebControls.ContentPlaceHolder)">
            <summary>
            获取ASP.NET原生态表单对象的值
            </summary>
            <param name="control">需要遍历的控件名称</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.FormDataSet(System.Web.UI.WebControls.ContentPlaceHolder,System.Data.DataRow)">
            <summary>
            设置ASP.NET原生态表单对象的值
            ContentPlaceHolder 对象的控件名必须为 xxx + COLID ，如:tbxSEQNO ddlSEQNO
            </summary>
            <param name="cph">ASP.NET原生态ContentPlaceHolder控件</param>
            <param name="dr">DataTable中的一行数据</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.DdlGet(System.String,System.Boolean)">
            <summary>
            获取数据源SQL语句
            </summary>
            <param name="strKey">数据库标识</param>
            <param name="isCache">是否从缓存中获取</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.DdlGet(System.String)">
            <summary>
            从缓存中获取数据源SQL语句
            </summary>
            <param name="strKey">数据库标识</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.DdlGetDb(System.String)">
            <summary>
            获取数据源SQL语句
            </summary>
            <param name="strKey">数据库标识</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataSql(FineUIPro.DropDownList,System.String)">
            <summary>
            绑定FineUIPro.DropDownList数据源
            </summary>
            <param name="ddl">FineUIPro.DropDownList控件</param>
            <param name="strSql">SQL语句</param>
            <returns>DataTable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataGet(FineUIPro.DropDownList,System.String,System.Boolean)">
            <summary>
            绑定FineUIPro.DropDownList数据源
            </summary>
            <param name="ddl">FineUIPro.DropDownList控件</param>
            <param name="strDDL">数据源SQL语句</param>
            <param name="isCache">是否启用缓存</param>
            <returns>DataTable数据源</returns>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataBind(FineUIPro.DropDownList,System.Data.DataTable)">
            <summary>
            绑定FineUIPro.DropDownList数据源
            </summary>
            <param name="ddl">FineUIPro.DropDownList控件</param>
            <param name="dtData">DataTable数据源</param>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataBind(System.Web.UI.WebControls.DropDownList,System.Data.DataTable)">
            <summary>
            绑定ASP.NET自带控件DropDownList的数据源
            </summary>
            <param name="ddl">ASP.NET原生态DropDownList控件</param>
            <param name="dtData">DataTable数据源</param>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataGet(FineUIPro.DropDownList,System.String)">
            <summary>
            绑定FineUIPro.DropDownList数据源
            </summary>
            <param name="ddl">FineUIPro.DropDownList控件</param>
            <param name="strDDL">数据库标识</param>
            <returns>下拉列表绑定的数据源</returns>
            <remarks>
                如果没有找到用户则返回空字符串.<br/>
                <paramref name="ddl"/> 参数为FineUIPro.DropDownList类型.<br/>
                <paramref name="strDDL"/> 参数对应于SYS_REPORT表中的SEQNO字段值.<br/>
            </remarks>
            <example>
                绑定下拉框数据:
                <code>
                    PubFunc.DdlDataGet(ddlLRY, "DDL_USER");
                </code>
                返回的数据源有可能为null，如果后续操作需要使用返回结果，要先判断:<br/>
                <c>
                      DataTable dt = PubFunc.DdlDataGet(ddlLRY, "DDL_USER");<br/>
                      if(dt!=null){...}
                </c>
            </example>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataGet(System.String,System.String,FineUIPro.DropDownList[])">
            <summary>
            绑定FineUIPro.DropDownList数据源(可进行参数绑定)
            </summary>
            <param name="strDDL">数据库标识</param>
            <param name="paras">要绑定的数据(多个用“,”隔开)</param>
            <param name="ddls">FineUIPro.DropDownList控件</param>
            <returns>下拉列表绑定的数据源</returns>
            <remarks>
                如果没有找到用户则返回空字符串.<br/>
                <paramref name="strDDL"/> 参数对应于SYS_REPORT表中的SEQNO字段值.<br/>
                <paramref name="paras"/> 参数为需要进行条件过滤的值.<br/>
                <paramref name="ddls"/> 参数为FineUIPro.DropDownList类型的参数数组.<br/>
            </remarks>
            <example>
                绑定下拉框数据:
                <code>
                    PubFunc.DdlDataGet("DDL_SYS_DEPTRANGE", "yuanp",ddlDEPT);
                </code>
                DDL_SYS_DEPTRANGE对应的SQL语句为：<br/>
               <c>SELECT CODE, '['||CODE||']'||NAME NAME FROM SYS_DEPT WHERE F_CHK_DATARANGE(CODE, '{0}') = 'Y' ORDER BY CODE</c>
                返回的数据源有可能为null，如果后续操作需要使用返回结果，要先判断:<br/>
                <c>
                      DataTable dt = PubFunc.DdlDataGet(ddlLRY, "DDL_USER");<br/>
                      if(dt!=null){...}
                </c>
            </example>
            <exception cref="T:System.ApplicationException">
                当paras有多个时，strDDL对应的SQL语句也必须有相应数量的参数，如果paras的数量与SQL语句中的参数数量不相等则抛出此异常
            </exception>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataGet(System.String,FineUIPro.DropDownList[])">
            <summary>
            绑定多个DropDownList控件数据
            </summary>
            <param name="strDDL">数据源</param>
            <param name="ddls">FineUIPro.DropDownList控件列表</param>
            <remarks>
                如果没有找到用户则返回空字符串.<br/>
                <paramref name="strDDL"/> 参数对应于SYS_REPORT表中的SEQNO字段值.<br/>
                <paramref name="ddls"/> 参数为FineUIPro.DropDownList类型的参数数组.<br/>
            </remarks>
            <example>
                绑定下拉框数据:
                <code>
                    PubFunc.DdlDataGet("DDL_USER", lstLRY, docLRY, docSLR);
                </code>
            </example>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataGet(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            绑定ASP.NET自带控件DropDownList的数据源
            </summary>
            <param name="ddl">FineUIPro.DropDownList控件</param>
            <param name="strDDL">数据库标识</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataGet(FineUIPro.CheckBoxList,System.String)">
            <summary>
            绑定FineUIPro.CheckBoxList数据源
            </summary>
            <param name="ckbl">FineUIPro.CheckBoxList控件</param>
            <param name="strDDL">数据库标识</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.DdlDataGet(FineUIPro.RadioButtonList,System.String)">
            <summary>
            绑定 FineUIPro.RadioButtonList 数据源
            </summary>
            <param name="rbl">FineUIPro.RadioButtonList 控件</param>
            <param name="strDDL">数据库标识</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.PubFunc.OperLog(System.String,System.String,System.String,System.String)">
            <summary>
            系统日志记录
            </summary>
            <param name="TypeID">日志类别</param>
            <param name="Workstation">工作站</param>
            <param name="Account">帐号</param>
            <param name="Content">日志内容</param>
        </member>
        <member name="T:XTBase.UserInfo">
            <summary>
            用户信息类
            </summary>
        </member>
        <member name="T:XTBase.Utilities.CacheHelper">
            <summary>
            缓存处理
            </summary>
        </member>
        <member name="M:XTBase.Utilities.CacheHelper.GetCache(System.String)">
            <summary>
            获取数据缓存
            </summary>
            <param name="CacheKey">键</param>
        </member>
        <member name="M:XTBase.Utilities.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:XTBase.Utilities.CacheHelper.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:XTBase.Utilities.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:XTBase.Utilities.CacheHelper.RemoveOneCache(System.String)">
            <summary>清除单一键缓存</summary>
            <param name="cacheKey">缓存名称</param>
        </member>
        <member name="M:XTBase.Utilities.CacheHelper.RemoveAllCache(System.String)">
            <summary>
            移除指定数据缓存
            </summary>
        </member>
        <member name="M:XTBase.Utilities.CacheHelper.RemoveAllCache">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="M:XTBase.Utilities.CacheHelper.RemoveManagersAllCache">
            <summary>清除所有缓存</summary>
        </member>
        <member name="M:XTBase.Utilities.CacheHelper.ShowAllCache">
            <summary>以列表形式返回已存在的所有缓存</summary>
            <returns></returns> 
        </member>
        <member name="T:XTBase.Utilities.EncryptionUtil">
            <summary>
            加密处理类
            </summary>
        </member>
        <member name="M:XTBase.Utilities.EncryptionUtil.ComparePasswords(System.String,System.String)">
            <summary>
            对比用户明文密码是否和加密后密码一致
            </summary>
            <param name="dbPassword">数据库中单向加密后的密码</param>
            <param name="userPassword">用户明文密码</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.EncryptionUtil.CreateDbPassword(System.String)">
            <summary>
            创建用户的数据库密码
            </summary>
            <param name="userPassword"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.EncryptionUtil.HashString(System.String)">
            <summary>
            将一个字符串哈希化
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:XTBase.Utilities.PasswordUtil">
            <summary>
            单相混淆加密用户密码，并比较密码是否一致的类
            </summary>
        </member>
        <member name="M:XTBase.Utilities.PasswordUtil.ComparePasswords(System.String,System.String)">
            <summary>
            对比用户明文密码是否和加密后密码一致
            </summary>
            <param name="dbPassword">数据库中单向加密后的密码</param>
            <param name="userPassword">用户明文密码</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.PasswordUtil.CreateDbPassword(System.String)">
            <summary>
            创建用户的数据库密码
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.PasswordUtil.HashString(System.String)">
            <summary>
            将一个字符串哈希化
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:XTBase.Utilities.StringHelper" -->
        <member name="M:XTBase.Utilities.StringHelper.GetStrArray(System.String,System.Char,System.Boolean)">
            <summary>
            把字符串按照分隔符转换成 List
            </summary>
            <param name="str">源字符串</param>
            <param name="speater">分隔符</param>
            <param name="toLower">是否转换为小写</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.GetStrArray(System.String)">
            <summary>
            把字符串转 按照, 分割 换为数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XTBase.Utilities.StringHelper.GetArrayStr(System.Collections.Generic.List{System.String},System.String)" -->
        <member name="M:XTBase.Utilities.StringHelper.GetArrayStr(System.Collections.Generic.List{System.Int32})">
            <summary>
            得到数组列表以逗号分隔的字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.GetArrayValueStr(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            得到数组列表以逗号分隔的字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.DelLastComma(System.String)">
            <summary>
            删除最后结尾的一个逗号
            </summary>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.DelLastChar(System.String,System.String)">
            <summary>
            删除最后结尾的指定字符后的字符
            </summary>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.DelStrSign(System.String,System.String)">
            <summary>删除字符串左右两边的分隔符号</summary>
            <param name="str">字符串</param>
            <param name="key">分隔符,默认为,</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.ToSBC(System.String)">
            <summary>
            转全角的函数(SBC case)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.ToDBC(System.String)">
            <summary>
             转半角的函数(SBC case)
            </summary>
            <param name="input">输入</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.GetSubStringList(System.String,System.Char)">
            <summary>
            把字符串按照指定分隔符装成 List 去除重复
            </summary>
            <param name="o_str"></param>
            <param name="sepeater"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.GetCleanStyle(System.String,System.String)">
            <summary>
             将字符串样式转换为纯字符串
            </summary>
            <param name="StrList"></param>
            <param name="SplitString"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.GetNewStyle(System.String,System.String,System.String,System.String@)">
            <summary>
            将字符串转换为新样式
            </summary>
            <param name="StrList"></param>
            <param name="NewStyle"></param>
            <param name="SplitString"></param>
            <param name="Error"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.SplitMulti(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="str"></param>
            <param name="splitstr"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.StrToId(System.String)">
            <summary>
            获取正确的Id，如果不是正整数，返回0
            </summary>
            <param name="_value"></param>
            <returns>返回正确的整数ID，失败返回0</returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsNumberId(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的，一般用于查询字符串参数的有效性验证。(0除外)
            </summary>
            <param name="_value">需验证的字符串。。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式。
            </summary>
            <param name="_express">正则表达式的内容。</param>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.GetMD5(System.String)">
            <summary>
            根据配置对指定字符串进行 MD5 加密
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.StrLength(System.String)">
            <summary>
            得到字符串长度，一个汉字长度为2
            </summary>
            <param name="inputString">参数字符串</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.ClipString(System.String,System.Int32)">
            <summary>
            截取指定长度字符串——区分中英文字符长度
            </summary>
            <param name="inputString">要处理的字符串</param>
            <param name="len">指定长度</param>
            <returns>返回处理后的字符串</returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.Left(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>截取字符串,从左边算起 n 个字,并经过 SQL注入过滤 处理(不区分中英文长度)，默认去左右两边空格与过滤XSS攻击字符</summary>
            <param name="str">字符串</param>
            <param name="length">截取的长度(字数)</param>
            <param name="isTrim">true=使用Trim(),falae=原文</param>
            <param name="isFilterXss">是否去除特殊符号</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.Right(System.String,System.Int32)">
            <summary>从字符串右边返回指定数目的字符——简单截取</summary>
            <param name="str">字符串</param>
            <param name="length">截取的长度(字数)</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.HtmlToTxt(System.String)">
            <summary>
            HTML转行成TEXT
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsNullOrEmpty``1(``0)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <typeparam name="T">要验证的对象的类型</typeparam>
            <param name="data">要验证的对象</param>        
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <param name="data">要验证的对象</param>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.FilterSql(System.String,System.Boolean,System.Boolean)">
            <summary>过滤 Sql 语句字符串中的注入脚本
            </summary>
            <param name="source">传入的字符串</param>
            <param name="isTrim">是否去除字符串两边的空格</param>
            <param name="isFilterXss">是否去除特殊符号</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.XssTextClear(System.String)">
            <summary>清除输入字符串中的特殊字符
            </summary>
            <param name="xssText">输入字符串</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsExistValue(System.String,System.String)">
            <summary> 检查字符串里每个字是否都在指定字符集内的字.
            比如:整数(0123456789)
            字母(abcdefghijklmnopqrstuvwxyz)
            </summary>
            <param name="sValue">字符串</param>
            <param name="sCompate">字符集</param>
            <returns>true=在字符集内,false=存在非字符集的字</returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsIdList(System.String)">
            <summary>检查输入是否为指字内容,检查id列(用于数据库查询),"34,5,1,8"</summary>
            <param name="str">字符串,分隔符默认为,</param>
            <returns>true=是id列,false=非id列</returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsIdList(System.String,System.String)">
            <summary>检查输入是否为指字内容,检查id列(用于数据库查询),"34,5,1,8"</summary>
            <param name="str">字符串</param>
            <param name="key">字符串,分隔符默认为,</param>
            <returns>true=是id列,false=非id列</returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsNumberChar(System.String)">
            <summary>是否为纯数字字符</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsEmail(System.String)">
            <summary>检测是否符合email格式</summary>
            <param name="str">要判断的email字符串</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsEnglish(System.String)">
            <summary>检查输入,是否由字母组成</summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsRegName(System.String)">
            <summary>检查输入,检查用户注册账号是否合法字符(由字母,数字或"_"组成)</summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsRndFileName(System.String)">
            <summary>检查输入,是否为随机生成的文件名称</summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsRndKey(System.String)">
            <summary>检查输入,是否为随机生成的文件名称(即全由字母和数字组成)</summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.GetIsRndKey(System.String)">
            <summary>检查输入,是否为随机生成的文件名称(即全由字母和数字组成)</summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsMobile(System.String)">
            <summary>检查输入,检查是否为正常的手机号码.</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.StringHelper.IsBase64(System.String)">
            <summary>判断输入是否为Base64编码.</summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:XTBase.Utilities.ExcelHelper">
            <summary>
            Excel处理类（基于NPOI）
            </summary>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ExportDT(System.Data.DataTable,System.String)">
            <summary>
            DataTable导出到Excel的MemoryStream
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ExportDT(System.Data.DataTable,System.String,System.String[0:,0:])">
            <summary>
            DataTable导出到Excel的MemoryStream
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="columnHeader">列头数组</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ExportDTtoExcel(System.Data.DataTable,System.String,System.String)">
            <summary>
            DataTable导出到Excel文件
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">保存位置</param>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ExportByWeb(System.Data.DataTable,System.String,System.String)">
            <summary>
            用于Web导出
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">文件名</param>
            <Author>柳永法 http://www.yongfa365.com/ 2010-5-8 22:21:41</Author>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ImportExceltoDt(System.String)">
            <summary>读取excel
            默认第一行为标头
            </summary>
            <param name="strFileName">excel文档路径</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ImportExceltoDt(System.String,System.String,System.Int32)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ImportExceltoDt(System.String,System.Int32,System.Int32)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet序号</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ImportExceltoDt(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ImportExceltoDt(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet序号</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ImportDt(NPOI.HSSF.UserModel.HSSFSheet,System.Int32,System.Boolean)">
            <summary>
            将制定sheet中的数据导出到datatable中
            </summary>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ImportExcelxtoDt(System.String)">
            <summary>
            将Excel文件中的数据读出到DataTable中(xlsx)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ImportExcelxtoDt(System.String,System.Int32,System.Int32)">
            <summary>
            将Excel文件中的数据读出到DataTable中(xlsx)
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="SheetIndex">需要导入的sheet序号</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.ExportDTtoExcelx(System.Data.DataTable,System.String)">
            <summary>
            将DataTable数据导出到Excel文件中(xlsx)
            </summary>
            <param name="dt"></param>
            <param name="file"></param>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.GetValueTypeForXLSX(NPOI.XSSF.UserModel.XSSFCell)">
            <summary>
            获取单元格类型(xlsx)
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.UpdateExcel(System.String,System.String,System.String[],System.Int32,System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluid">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.UpdateExcel(System.String,System.String,System.String[][],System.Int32[],System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluids">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.UpdateExcel(System.String,System.String,System.Double[],System.Int32,System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluid">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:XTBase.Utilities.ExcelHelper.UpdateExcel(System.String,System.String,System.Double[][],System.Int32[],System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluids">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="T:XTBase.Utilities.PinYinUtil">
             <summary>
            汉子拼音处理类
             </summary>
        </member>
        <member name="M:XTBase.Utilities.PinYinUtil.GetCodstring(System.String)">
            <summary>
            取汉字拼音的首字母
            </summary>
            <param name="UnName">汉字</param>
            <returns>首字母</returns>
        </member>
        <member name="M:XTBase.Utilities.WriteLog.ReadLogs(System.String)">
            <summary>
            读文件操作
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
